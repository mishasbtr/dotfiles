{
"version":3,
"file":"blaze-out/k8-opt/bin/cultural/integrations/chromeextensions/arttab/background/js_background.nodeps.js",
"lineCount":828,
"mappings":"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",
"sources":["blaze-out/k8-opt/bin/cultural/integrations/chromeextensions/arttab/background/js_background.nodeps.jstrimmer_bootstrap.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/util/arrayiterator.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/util/defineproperty.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/util/global.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/util/polyfill.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/symbol.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/util/makeiterator.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/util/assign.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/util/owns.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/object/assign.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/generator_engine.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/execute_async_generator.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/promise/promise.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/util/iteratorfromarray.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/array/keys.js","third_party/java_src/jscomp/java/com/google/javascript/jscomp/js/es6/number/isfinite.js","cultural/integrations/chromeextensions/shared/storage/storage.ts","cultural/integrations/chromeextensions/arttab/newtab/settings.ts","third_party/javascript/closure/string/string.js","third_party/javascript/closure/date/date.js","javascript/closure/base.js","cultural/integrations/chromeextensions/shared/analytics/analytics.ts","cultural/integrations/chromeextensions/shared/assetdata/assetdata.ts","cultural/integrations/chromeextensions/arttab/background/handleMessages.ts","cultural/integrations/chromeextensions/shared/extmessages/extmessages.ts","cultural/integrations/chromeextensions/arttab/background/background.ts","cultural/integrations/chromeextensions/arttab/background/extensionInstall.ts","cultural/integrations/chromeextensions/arttab/background/handleActions.ts"],
"sourcesContent":["","","","","","","","","","","","","","","","","/**\n * Insert serialised data into Chrome sotrage.local or storage.sync, determined\n * by the local param.\n */\nexport async function writeData(\n  key: string,\n  data: string,\n  local = false,\n): Promise<void> {\n  if (local) {\n    await chrome.storage.local.set({[key]: data});\n  } else {\n    await chrome.storage.sync.set({[key]: data});\n  }\n}\n\n/**\n * Read serialised data from Chrome sotrage.local or storage.sync, determined by\n * the local param.\n */\nexport async function readData(key: string, local = false): Promise<string> {\n  let data;\n  if (local) {\n    data = await chrome.storage.local.get([key]);\n  } else {\n    data = await chrome.storage.sync.get([key]);\n  }\n  return data ? data[key] : '';\n}\n","import {\n  readData,\n  writeData,\n} from 'google3/cultural/integrations/chromeextensions/shared/storage/storage';\nimport {Date as GoogDate} from 'google3/third_party/javascript/closure/date/date';\nimport {clone} from 'google3/third_party/javascript/closure/object/object';\n\n/** NewTab user settings IDs. */\nexport enum NewTabSetting {\n  TURNOVER_ALWAYS = 'turnoverAlways',\n  APPS_BUTTON_HIDDEN = 'appsButtonHidden',\n  DEFAULT_NEWTAB_BUTTON_HIDDEN = 'defaultNewTabButtonHidden',\n  TOP_SITES_BUTTON_HIDDEN = 'topSitesButtonHidden',\n}\n\n/** NewTab user settings object. */\nexport declare interface UserSettings {\n  [NewTabSetting.TURNOVER_ALWAYS]: boolean;\n  [NewTabSetting.APPS_BUTTON_HIDDEN]: boolean;\n  [NewTabSetting.DEFAULT_NEWTAB_BUTTON_HIDDEN]: boolean;\n  [NewTabSetting.TOP_SITES_BUTTON_HIDDEN]: boolean;\n}\n\nconst DEFAULT_USER_SETTINGS: UserSettings = {\n  [NewTabSetting.TURNOVER_ALWAYS]: false,\n  [NewTabSetting.APPS_BUTTON_HIDDEN]: false,\n  [NewTabSetting.DEFAULT_NEWTAB_BUTTON_HIDDEN]: false,\n  [NewTabSetting.TOP_SITES_BUTTON_HIDDEN]: false,\n};\n\n/** Inserts the default user settings values. */\nexport async function writeDefaultUserSettings(): Promise<void> {\n  Object.keys(DEFAULT_USER_SETTINGS).forEach(async (key) => {\n    await writeData(\n      key,\n      JSON.stringify(DEFAULT_USER_SETTINGS[key as NewTabSetting]),\n    );\n  });\n}\n\n/** Returns an object containing the user settings values. */\nexport async function getUserSettings(): Promise<UserSettings> {\n  const userSettings: UserSettings = clone(\n    DEFAULT_USER_SETTINGS,\n  ) as UserSettings;\n\n  for (const key of Object.keys(userSettings)) {\n    const storedValueStr = await readData(key as NewTabSetting);\n    if (storedValueStr) {\n      userSettings[key as NewTabSetting] = JSON.parse(\n        storedValueStr,\n      ) as boolean;\n    }\n  }\n\n  return userSettings;\n}\n\n/** Write a user setting to storage. */\nexport async function writeUserSetting(\n  key: NewTabSetting,\n  value: boolean,\n): Promise<void> {\n  await writeData(key as string, JSON.stringify(value));\n}\n\nconst localStorage = true;\n\nconst verbose = false;\nconst includeTz = false;\n\n/** Returns the current date in ISO format string. */\nexport function getDateStr(): string {\n  const now = new GoogDate();\n  return now.toIsoString(verbose, includeTz);\n}\n\n/** Converts a date string to a number. */\nexport function dateStrToNumber(dateStr: string): number {\n  let dateNum = Number(dateStr);\n  if (isNaN(dateNum)) {\n    dateNum = 0;\n  }\n  return Math.floor(dateNum);\n}\n\nenum CurrentAssetIndex {\n  KEY = 'currentAssetIndex',\n  DATE_KEY = 'indexWriteDate',\n}\n\n/** Save the current asset index to local storage. */\nexport async function writeCurrentAssetIndex(\n  indexToSave: number,\n): Promise<void> {\n  await writeData(CurrentAssetIndex.DATE_KEY, getDateStr(), localStorage);\n  await writeData(\n    CurrentAssetIndex.KEY,\n    JSON.stringify(indexToSave),\n    localStorage,\n  );\n}\n\n/** Returns the date the asset index was stored. */\nexport async function getIndexWriteDate(): Promise<number> {\n  const storedValueStr = await readData(\n    CurrentAssetIndex.DATE_KEY,\n    localStorage,\n  );\n  if (!storedValueStr) {\n    return dateStrToNumber(getDateStr());\n  }\n  const dateStr = JSON.parse(storedValueStr) as string;\n  return dateStrToNumber(dateStr);\n}\n\n/** Returns the current asset index from local storage. */\nexport async function getCurrentAssetIndex(): Promise<number> {\n  const storedValueStr = await readData(CurrentAssetIndex.KEY, localStorage);\n  if (!storedValueStr) {\n    return 0;\n  }\n  return JSON.parse(storedValueStr) as number;\n}\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for string manipulation.\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string');\ngoog.provide('goog.string.Unicode');\n\ngoog.require('goog.string.internal');\ngoog.require('safevalues.dom');\ngoog.require('safevalues.restricted.reviewed');\n\n\n/**\n * @define {boolean} Enables HTML escaping of lowercase letter \"e\" which helps\n * with detection of double-escaping as this letter is frequently used.\n */\ngoog.string.DETECT_DOUBLE_ESCAPING =\n    goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);\n\n\n/**\n * @define {boolean} Whether to force non-dom html unescaping.\n */\ngoog.string.FORCE_NON_DOM_HTML_UNESCAPING =\n    goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);\n\n\n/**\n * Common Unicode string characters.\n * @enum {string}\n */\ngoog.string.Unicode = {\n  NBSP: '\\xa0',\n  ZERO_WIDTH_SPACE: '\\u200b'  // This is equivalent to <wbr>.\n};\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n */\ngoog.string.startsWith = goog.string.internal.startsWith;\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n */\ngoog.string.endsWith = goog.string.internal.endsWith;\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveStartsWith =\n    goog.string.internal.caseInsensitiveStartsWith;\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveEndsWith =\n    goog.string.internal.caseInsensitiveEndsWith;\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n */\ngoog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n */\ngoog.string.subs = function(str, var_args) {\n  'use strict';\n  const splitParts = str.split('%s');\n  let returnString = '';\n\n  const subsArguments = Array.prototype.slice.call(arguments, 1);\n  while (subsArguments.length &&\n         // Replace up to the last split part. We are inserting in the\n         // positions between split parts.\n         splitParts.length > 1) {\n    returnString += splitParts.shift() + subsArguments.shift();\n  }\n\n  return returnString + splitParts.join('%s');  // Join unused '%s'\n};\n\n\n/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of `str` with collapsed whitespace.\n */\ngoog.string.collapseWhitespace = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n */\ngoog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is empty.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty.\n */\ngoog.string.isEmptyString = function(str) {\n  'use strict';\n  return str.length == 0;\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n *\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmpty = goog.string.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\n *     instead.\n */\ngoog.string.isEmptyOrWhitespaceSafe = function(str) {\n  'use strict';\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));\n};\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n *\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;\n\n\n/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n */\ngoog.string.isBreakingWhitespace = function(str) {\n  'use strict';\n  return !/[^\\t\\n\\r ]/.test(str);\n};\n\n\n/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` consists entirely of letters.\n */\ngoog.string.isAlpha = function(str) {\n  'use strict';\n  return !/[^a-zA-Z]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if `str` is numeric.\n */\ngoog.string.isNumeric = function(str) {\n  'use strict';\n  return !/[^0-9]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` is alphanumeric.\n */\ngoog.string.isAlphaNumeric = function(str) {\n  'use strict';\n  return !/[^a-zA-Z0-9]/.test(str);\n};\n\n\n/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a space.\n */\ngoog.string.isSpace = function(ch) {\n  'use strict';\n  return ch == ' ';\n};\n\n\n/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a valid unicode character.\n */\ngoog.string.isUnicodeChar = function(ch) {\n  'use strict';\n  return ch.length == 1 && ch >= ' ' && ch <= '~' ||\n      ch >= '\\u0080' && ch <= '\\uFFFD';\n};\n\n\n/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of `str` stripped of newlines.\n */\ngoog.string.stripNewlines = function(str) {\n  'use strict';\n  return str.replace(/(\\r\\n|\\r|\\n)+/g, ' ');\n};\n\n\n/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} `str` A copy of {@code} with canonicalized newlines.\n */\ngoog.string.canonicalizeNewlines = function(str) {\n  'use strict';\n  return str.replace(/(\\r\\n|\\r|\\n)/g, '\\n');\n};\n\n\n/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of `str` with all whitespace normalized.\n */\ngoog.string.normalizeWhitespace = function(str) {\n  'use strict';\n  return str.replace(/\\xa0|\\s/g, ' ');\n};\n\n\n/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of `str` with all consecutive spaces and tabs\n *    replaced with a single space.\n */\ngoog.string.normalizeSpaces = function(str) {\n  'use strict';\n  return str.replace(/\\xa0|[ \\t]+/g, ' ');\n};\n\n\n/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n */\ngoog.string.collapseBreakingSpaces = function(str) {\n  'use strict';\n  return str.replace(/[\\t\\r\\n ]+/g, ' ')\n      .replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trim = goog.string.internal.trim;\n\n\n/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimLeft = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+/, '');\n};\n\n\n/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimRight = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+$/, '');\n};\n\n\n/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n */\ngoog.string.caseInsensitiveCompare =\n    goog.string.internal.caseInsensitiveCompare;\n\n\n/**\n * Compares two strings interpreting their numeric substrings as numbers.\n *\n * @param {string} str1 First string.\n * @param {string} str2 Second string.\n * @param {!RegExp} tokenizerRegExp Splits a string into substrings of\n *     non-negative integers, non-numeric characters and optionally fractional\n *     numbers starting with a decimal point.\n * @return {number} Negative if str1 < str2, 0 is str1 == str2, positive if\n *     str1 > str2.\n * @private\n */\ngoog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {\n  'use strict';\n  if (str1 == str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  // Using match to split the entire string ahead of time turns out to be faster\n  // for most inputs than using RegExp.exec or iterating over each character.\n  const tokens1 = str1.toLowerCase().match(tokenizerRegExp);\n  const tokens2 = str2.toLowerCase().match(tokenizerRegExp);\n\n  const count = Math.min(tokens1.length, tokens2.length);\n\n  for (let i = 0; i < count; i++) {\n    const a = tokens1[i];\n    const b = tokens2[i];\n\n    // Compare pairs of tokens, returning if one token sorts before the other.\n    if (a != b) {\n      // Only if both tokens are integers is a special comparison required.\n      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').\n      const num1 = parseInt(a, 10);\n      if (!isNaN(num1)) {\n        const num2 = parseInt(b, 10);\n        if (!isNaN(num2) && num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  // If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length != tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  // The two strings must be equivalent except for case (perfect equality is\n  // tested at the head of the function.) Revert to default ASCII string\n  // comparison to stabilize the sort.\n  return str1 < str2 ? -1 : 1;\n};\n\n\n/**\n * String comparison function that handles non-negative integer numbers in a\n * way humans might expect. Using this function, the string 'File 2.jpg' sorts\n * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison\n * is mostly case-insensitive, though strings that are identical except for case\n * are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is up to 50x slower than either the default or the\n * case-insensitive compare. It should not be used in time-critical code, but\n * should be fast enough to sort several hundred short strings (like filenames)\n * with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.intAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\D+/g);\n};\n\n\n/**\n * String comparison function that handles non-negative integer and fractional\n * numbers in a way humans might expect. Using this function, the string\n * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent\n * to {@link goog.string.intAwareCompare} apart from the way how it interprets\n * dots.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.floatAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\.\\d+|\\D+/g);\n};\n\n\n/**\n * Alias for {@link goog.string.floatAwareCompare}.\n *\n * @param {string} str1\n * @param {string} str2\n * @return {number}\n */\ngoog.string.numerateCompare = goog.string.floatAwareCompare;\n\n\n/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of `str` that is safe for urls.\n *     Note that '#', ':', and other characters used to delimit portions\n *     of URLs *will* be encoded.\n */\ngoog.string.urlEncode = function(str) {\n  'use strict';\n  return encodeURIComponent(String(str));\n};\n\n\n/**\n * URL-decodes the string. We need to specially handle '+'s because\n * the javascript library doesn't convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded `str`.\n */\ngoog.string.urlDecode = function(str) {\n  'use strict';\n  return decodeURIComponent(str.replace(/\\+/g, ' '));\n};\n\n\n/**\n * Converts \\n to <br>s or <br />s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n */\ngoog.string.newLineToBr = goog.string.internal.newLineToBr;\n\n\n/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n *\n * It should be noted that > doesn't need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\n * lowercase letter \"e\".\n *\n * NOTE(pupius):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn't require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars / average (mix of cases) / all 4 chars)\n * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\n * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\n * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {\n  'use strict';\n  str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);\n  if (goog.string.DETECT_DOUBLE_ESCAPING) {\n    str = str.replace(goog.string.E_RE_, '&#101;');\n  }\n  return str;\n};\n\n\n/**\n * Regular expression that matches a lowercase letter \"e\", for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.E_RE_ = /e/g;\n\n\n/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntities = function(str) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    // We are careful not to use a DOM if we do not have one or we explicitly\n    // requested non-DOM html unescaping.\n    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&\n        'document' in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      // Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Unescapes a HTML string using the provided document.\n *\n * @param {string} str The string to unescape.\n * @param {!Document} document A document to use in escaping the string.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntitiesWithDocument = function(str, document) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    return goog.string.unescapeEntitiesUsingDom_(str, document);\n  }\n  return str;\n};\n\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @param {Document=} opt_document An optional document to use for creating\n *     elements. If this is not specified then the default window.document\n *     will be used.\n * @return {string} The unescaped `str` string.\n */\ngoog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {\n  'use strict';\n  /** @type {!Object<string, string>} */\n  const seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n  /** @type {!Element} */\n  let div;\n  if (opt_document) {\n    div = opt_document.createElement('div');\n  } else {\n    div = goog.global.document.createElement('div');\n  }\n  // Match as many valid entity characters as possible. If the actual entity\n  // happens to be shorter, it will still work as innerHTML will return the\n  // trailing characters unchanged. Since the entity characters do not include\n  // open angle bracket, there is no chance of XSS from the innerHTML use.\n  // Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    'use strict';\n    // Check for cached entity.\n    let value = seen[s];\n    if (value) {\n      return value;\n    }\n    // Check for numeric entity.\n    if (entity.charAt(0) == '#') {\n      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n      const n = Number('0' + entity.slice(1));\n      if (!isNaN(n)) {\n        value = String.fromCharCode(n);\n      }\n    }\n    // Fall back to innerHTML otherwise.\n    if (!value) {\n      // Append a non-entity character to avoid a bug in Webkit that parses\n      // an invalid entity at the end of innerHTML text as the empty string.\n      safevalues.dom.safeElement.setInnerHtml(\n          div,\n          safevalues.restricted.reviewed.htmlSafeByReview(\n              s + ' ', {justification: 'Single HTML entity.'}));\n      // Then remove the trailing character from the result.\n      value = div.firstChild.nodeValue.slice(0, -1);\n    }\n    // Cache and return.\n    return seen[s] = value;\n  });\n};\n\n\n/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapePureXmlEntities_ = function(str) {\n  'use strict';\n  return str.replace(/&([^;]+);/g, function(s, entity) {\n    'use strict';\n    switch (entity) {\n      case 'amp':\n        return '&';\n      case 'lt':\n        return '<';\n      case 'gt':\n        return '>';\n      case 'quot':\n        return '\"';\n      default:\n        if (entity.charAt(0) == '#') {\n          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.\n          const n = Number('0' + entity.slice(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        // For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization / Tokenizing character references.\n * @private\n * @type {!RegExp}\n */\ngoog.string.HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.whitespaceEscape = function(str, opt_xml) {\n  'use strict';\n  // This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);\n};\n\n\n/**\n * Preserve spaces that would be otherwise collapsed in HTML by replacing them\n * with non-breaking space Unicode characters.\n * @param {string} str The string in which to preserve whitespace.\n * @return {string} A copy of `str` with preserved whitespace.\n */\ngoog.string.preserveSpaces = function(str) {\n  'use strict';\n  return str.replace(/(^|[\\n ]) /g, '$1' + goog.string.Unicode.NBSP);\n};\n\n\n/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * <pre>\n * goog.string.stripQuotes('\"abc\"', '\"`') --\u003e 'abc'\n * goog.string.stripQuotes('`abc`', '\"`') --\u003e 'abc'\n * </pre>\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of `str` without the quotes.\n */\ngoog.string.stripQuotes = function(str, quoteChars) {\n  'use strict';\n  const length = quoteChars.length;\n  for (let i = 0; i < length; i++) {\n    const quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Truncates a string to a certain length and adds '...' if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * 'Hello World!' produces 'Hello W...'.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated `str` string.\n */\ngoog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (str.length > chars) {\n    str = str.substring(0, chars - 3) + '...';\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Truncate a string in the middle, adding \"...\" if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number=} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of `str`.\n */\ngoog.string.truncateMiddle = function(\n    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars && str.length > chars) {\n    if (opt_trailingChars > chars) {\n      opt_trailingChars = chars;\n    }\n    const endPoint = str.length - opt_trailingChars;\n    const startPoint = chars - opt_trailingChars;\n    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);\n  } else if (str.length > chars) {\n    // Favor the beginning of the string:\n    let half = Math.floor(chars / 2);\n    const endPos = str.length - half;\n    half += chars % 2;\n    str = str.substring(0, half) + '...' + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private {!Object<string, string>}\n */\ngoog.string.specialEscapeChars_ = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\x0B': '\\\\x0B',  // '\\v' is not supported in JScript\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  // To support the use case of embedding quoted strings inside of script\n  // tags, we have to make sure HTML comments and opening/closing script tags do\n  // not appear in the resulting string. The specific strings that must be\n  // escaped are documented at:\n  // https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements\n  '<': '\\\\u003C'  // NOTE: JSON.parse crashes on '\\\\x3c'.\n};\n\n\n/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private {!Object<string, string>}\n */\ngoog.string.jsEscapeCache_ = {\n  '\\'': '\\\\\\''\n};\n\n\n/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string. The resulting string is safe to embed in\n * `<script>` tags as \"<\" is escaped.\n * @param {string} s The string to quote.\n * @return {string} A copy of `s` surrounded by double quotes.\n */\ngoog.string.quote = function(s) {\n  'use strict';\n  s = String(s);\n  const sb = ['\"'];\n  for (let i = 0; i < s.length; i++) {\n    const ch = s.charAt(i);\n    const cc = ch.charCodeAt(0);\n    sb[i + 1] = goog.string.specialEscapeChars_[ch] ||\n        ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));\n  }\n  sb.push('\"');\n  return sb.join('');\n};\n\n\n/**\n * Takes a string and returns the escaped string for that input string.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing `str`.\n */\ngoog.string.escapeString = function(str) {\n  'use strict';\n  const sb = [];\n  for (let i = 0; i < str.length; i++) {\n    sb[i] = goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join('');\n};\n\n\n/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -> \"\\\\x0E\".\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing `c`.\n */\ngoog.string.escapeChar = function(c) {\n  'use strict';\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];\n  }\n\n  let rv = c;\n  const cc = c.charCodeAt(0);\n  if (cc > 31 && cc < 127) {\n    rv = c;\n  } else {\n    // tab is 9 but handled above\n    if (cc < 256) {\n      rv = '\\\\x';\n      if (cc < 16 || cc > 256) {\n        rv += '0';\n      }\n    } else {\n      rv = '\\\\u';\n      if (cc < 4096) {  // \\u1000\n        rv += '0';\n      }\n    }\n    rv += cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] = rv;\n};\n\n\n/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.contains = goog.string.internal.contains;\n\n\n/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.caseInsensitiveContains =\n    goog.string.internal.caseInsensitiveContains;\n\n\n/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n */\ngoog.string.countOf = function(s, ss) {\n  'use strict';\n  return s && ss ? s.split(ss).length - 1 : 0;\n};\n\n\n/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of `s` with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n */\ngoog.string.removeAt = function(s, index, stringLength) {\n  'use strict';\n  let resultStr = s;\n  // If the index is greater or equal to 0 then remove substring\n  if (index >= 0 && index < s.length && stringLength > 0) {\n    resultStr = s.slice(0, index) + s.slice(index + stringLength);\n  }\n  return resultStr;\n};\n\n\n/**\n * Removes the first occurrence of a substring from a string.\n * @param {string} str The base string from which to remove.\n * @param {string} substr The string to remove.\n * @return {string} A copy of `str` with `substr` removed or the\n *     full string if nothing is removed.\n */\ngoog.string.remove = function(str, substr) {\n  'use strict';\n  return str.replace(substr, '');\n};\n\n\n/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of `s` with `ss` removed or the full\n *      string if nothing is removed.\n */\ngoog.string.removeAll = function(s, ss) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, '');\n};\n\n\n/**\n *  Replaces all occurrences of a substring of a string with a new substring.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to replace.\n *  @param {string} replacement The replacement string.\n *  @return {string} A copy of `s` with `ss` replaced by\n *      `replacement` or the original string if nothing is replaced.\n */\ngoog.string.replaceAll = function(s, ss, replacement) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, replacement.replace(/\\$/g, '$$$$'));\n};\n\n\n/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of `s`.\n */\ngoog.string.regExpEscape = function(s) {\n  'use strict';\n  return String(s)\n      .replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n      .replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing `length` repetitions of\n *     `string`.\n */\ngoog.string.repeat = (String.prototype.repeat) ? function(string, length) {\n  'use strict';\n  // The native method is over 100 times faster than the alternative.\n  return string.repeat(length);\n} : function(string, length) {\n  'use strict';\n  return new Array(length + 1).join(string);\n};\n\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'</pre>\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number=} opt_precision The desired precision.\n * @return {string} `num` as a string with the given options.\n */\ngoog.string.padNumber = function(num, length, opt_precision) {\n  'use strict';\n  if (!Number.isFinite(num)) return String(num);\n  let s =\n      (opt_precision !== undefined) ? num.toFixed(opt_precision) : String(num);\n  let index = s.indexOf('.');\n  if (index === -1) {\n    index = s.length;\n  }\n  const sign = s[0] === '-' ? '-' : '';\n  if (sign) {\n    s = s.substring(1);\n  }\n  return sign + goog.string.repeat('0', Math.max(0, length - index)) + s;\n};\n\n\n/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the `obj`.\n */\ngoog.string.makeSafe = function(obj) {\n  'use strict';\n  return obj == null ? '' : String(obj);\n};\n\n/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn't trust JavaScript's random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n */\ngoog.string.getRandomString = function() {\n  'use strict';\n  const x = 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n */\ngoog.string.compareVersions = goog.string.internal.compareVersions;\n\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for `str`, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n */\ngoog.string.hashCode = function(str) {\n  'use strict';\n  let result = 0;\n  for (let i = 0; i < str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result;\n};\n\n\n/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n */\ngoog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;\n\n\n/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n */\ngoog.string.createUniqueString = function() {\n  'use strict';\n  return 'goog_' + goog.string.uniqueStringCounter_++;\n};\n\n\n/**\n * Converts the supplied string to a number, which may be Infinity or NaN.\n * This function strips whitespace: (toNumber(' 123') === 123)\n * This function accepts scientific notation: (toNumber('1e1') === 10)\n *\n * This is better than JavaScript's built-in conversions because, sadly:\n *     (Number(' ') === 0) and (parseFloat('123a') === 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n */\ngoog.string.toNumber = function(str) {\n  'use strict';\n  const num = Number(str);\n  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n/**\n * Returns whether the given string is lower camel case (e.g. \"isFooBar\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is lower camel case.\n */\ngoog.string.isLowerCamelCase = function(str) {\n  'use strict';\n  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);\n};\n\n\n/**\n * Returns whether the given string is upper camel case (e.g. \"FooBarBaz\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is upper camel case.\n */\ngoog.string.isUpperCamelCase = function(str) {\n  'use strict';\n  return /^([A-Z][a-z]*)+$/.test(str);\n};\n\n\n/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \"multi-part-string\" to \"multiPartString\"), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n */\ngoog.string.toCamelCase = function(str) {\n  'use strict';\n  return String(str).replace(/\\-([a-z])/g, function(all, match) {\n    'use strict';\n    return match.toUpperCase();\n  });\n};\n\n\n/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \"multiPartString\" to \"multi-part-string\"), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n */\ngoog.string.toSelectorCase = function(str) {\n  'use strict';\n  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n\n\n/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn't preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter => \" \":\n *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three')  => 'One Two Three'\n *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '\n *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'\n *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'\n *\n * Custom delimiter => \"_-.\":\n *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'\n *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '\n *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'\n *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'\n *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'\n *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'\n *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'\n *\n * @param {string} str String value in camelCase form.\n * @param {string=} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n */\ngoog.string.toTitleCase = function(str, opt_delimiters) {\n  'use strict';\n  let delimiters = (typeof opt_delimiters === 'string') ?\n      goog.string.regExpEscape(opt_delimiters) :\n      '\\\\s';\n\n  // For IE8, we need to prevent using an empty character set. Otherwise,\n  // incorrect matching will occur.\n  delimiters = delimiters ? '|[' + delimiters + ']+' : '';\n\n  const regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');\n  return str.replace(regexp, function(all, p1, p2) {\n    'use strict';\n    return p1 + p2.toUpperCase();\n  });\n};\n\n\n/**\n * Capitalizes a string, i.e. converts the first letter to uppercase\n * and all other letters to lowercase, e.g.:\n *\n * goog.string.capitalize('one')     => 'One'\n * goog.string.capitalize('ONE')     => 'One'\n * goog.string.capitalize('one two') => 'One two'\n *\n * Note that this function does not trim initial whitespace.\n *\n * @param {string} str String value to capitalize.\n * @return {string} String value with first letter in uppercase.\n */\ngoog.string.capitalize = function(str) {\n  'use strict';\n  return String(str.charAt(0)).toUpperCase() +\n      String(str.slice(1)).toLowerCase();\n};\n\n\n/**\n * Parse a string in decimal or hexidecimal ('0xFFFF') form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \"0\" are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n */\ngoog.string.parseInt = function(value) {\n  'use strict';\n  // Force finite numbers to strings.\n  if (isFinite(value)) {\n    value = String(value);\n  }\n\n  if (typeof value === 'string') {\n    // If the string starts with '0x' or '-0x', parse as hex.\n    return /^\\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n\n\n/**\n * Splits a string on a separator a limited number of times.\n *\n * This implementation is more similar to Python or Java, where the limit\n * parameter specifies the maximum number of splits rather than truncating\n * the number of results.\n *\n * See http://docs.python.org/2/library/stdtypes.html#str.split\n * See JavaDoc: http://goo.gl/F2AsY\n * See Mozilla reference: http://goo.gl/dZdZs\n *\n * @param {string} str String to split.\n * @param {string} separator The separator.\n * @param {number} limit The limit to the number of splits. The resulting array\n *     will have a maximum length of limit+1.  Negative numbers are the same\n *     as zero.\n * @return {!Array<string>} The string, split.\n */\ngoog.string.splitLimit = function(str, separator, limit) {\n  'use strict';\n  const parts = str.split(separator);\n  const returnVal = [];\n\n  // Only continue doing this while we haven't hit the limit and we have\n  // parts left.\n  while (limit > 0 && parts.length) {\n    returnVal.push(parts.shift());\n    limit--;\n  }\n\n  // If there are remaining parts, append them to the end.\n  if (parts.length) {\n    returnVal.push(parts.join(separator));\n  }\n\n  return returnVal;\n};\n\n\n/**\n * Finds the characters to the right of the last instance of any separator\n *\n * This function is similar to goog.string.path.baseName, except it can take a\n * list of characters to split the string on. It will return the rightmost\n * grouping of characters to the right of any separator as a left-to-right\n * oriented string.\n *\n * @see goog.string.path.baseName\n * @param {string} str The string\n * @param {string|!Array<string>} separators A list of separator characters\n * @return {string} The last part of the string with respect to the separators\n */\ngoog.string.lastComponent = function(str, separators) {\n  'use strict';\n  if (!separators) {\n    return str;\n  } else if (typeof separators == 'string') {\n    separators = [separators];\n  }\n\n  let lastSeparatorIndex = -1;\n  for (let i = 0; i < separators.length; i++) {\n    if (separators[i] == '') {\n      continue;\n    }\n    const currentSeparatorIndex = str.lastIndexOf(separators[i]);\n    if (currentSeparatorIndex > lastSeparatorIndex) {\n      lastSeparatorIndex = currentSeparatorIndex;\n    }\n  }\n  if (lastSeparatorIndex == -1) {\n    return str;\n  }\n  return str.slice(lastSeparatorIndex + 1);\n};\n\n\n/**\n * Computes the Levenshtein edit distance between two strings.\n * @param {string} a\n * @param {string} b\n * @return {number} The edit distance between the two strings.\n */\ngoog.string.editDistance = function(a, b) {\n  'use strict';\n  const v0 = [];\n  const v1 = [];\n\n  if (a == b) {\n    return 0;\n  }\n\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n\n  for (let i = 0; i < b.length + 1; i++) {\n    v0[i] = i;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    v1[0] = i + 1;\n\n    for (let j = 0; j < b.length; j++) {\n      const cost = Number(a[i] != b[j]);\n      // Cost for the substring is the minimum of adding one character, removing\n      // one character, or a swap.\n      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n\n    for (let j = 0; j < v0.length; j++) {\n      v0[j] = v1[j];\n    }\n  }\n\n  return v1[b.length];\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Functions and objects for date representation and manipulation.\n * @suppress {checkPrototypalTypes}\n */\n\ngoog.provide('goog.date');\ngoog.provide('goog.date.Date');\ngoog.provide('goog.date.DateLike');\ngoog.provide('goog.date.DateTime');\ngoog.provide('goog.date.Interval');\ngoog.provide('goog.date.month');\ngoog.provide('goog.date.weekDay');\n\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.DateTimeSymbols');\ngoog.require('goog.string');\n\n\n/**\n * Constants for weekdays.\n * @enum {number}\n */\ngoog.date.weekDay = {\n  MON: 0,\n  TUE: 1,\n  WED: 2,\n  THU: 3,\n  FRI: 4,\n  SAT: 5,\n  SUN: 6\n};\n\n\n/**\n * Constants for months.\n * @enum {number}\n */\ngoog.date.month = {\n  JAN: 0,\n  FEB: 1,\n  MAR: 2,\n  APR: 3,\n  MAY: 4,\n  JUN: 5,\n  JUL: 6,\n  AUG: 7,\n  SEP: 8,\n  OCT: 9,\n  NOV: 10,\n  DEC: 11\n};\n\n\n/**\n * Regular expression for splitting date parts from ISO 8601 styled string.\n * Examples: '20060210' or '2005-02-22' or '20050222' or '2005-08'\n * or '2005-W22' or '2005W22' or '2005-W22-4', etc.\n * For explanation and more examples, see:\n * {@link http://en.wikipedia.org/wiki/ISO_8601}\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDateStringRegex_ = new RegExp(\n    '^((?:[-+]\\\\d*)?\\\\d{4})(?:(?:-?(\\\\d{2})(?:-?(\\\\d{2}))?)|' +\n    '(?:-?(\\\\d{3}))|(?:-?W(\\\\d{2})(?:-?([1-7]))?))?$');\n\n\n/**\n * Regular expression for splitting time parts from ISO 8601 styled string.\n * Examples: '18:46:39.994' or '184639.994'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimeStringRegex_ =\n    /^(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(\\.\\d+)?)?)?$/;\n\n\n/**\n * Regular expression for splitting timezone parts from ISO 8601 styled string.\n * Example: The part after the '+' in '18:46:39+07:00'.  Or '09:30Z' (UTC).\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\d{2})(?::?(\\d{2}))?)$/;\n\n\n/**\n * Regular expression for splitting duration parts from ISO 8601 styled string.\n * Example: '-P1Y2M3DT4H5M6.7S'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDurationRegex_ = new RegExp(\n    '^(-)?P(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)D)?' +\n    '(T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$');\n\n\n/**\n * Number of milliseconds in a day.\n * @type {number}\n */\ngoog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * Number of milliseconds in an ordinary 400-year Gregorian calendar cycle.\n * It can be derived by running\n * `new Date(800, 0, 0).getTime() - new Date(400, 0, 0).getTime()`.\n * Since this number includes leap seconds, it is not evenly dividable by\n * the number of years (importantly, 146097 = 365.2425 * 400).\n * It should be used only for computing dates in the years 0-99 in UTC.\n * @type {number}\n * @private\n */\ngoog.date.MS_PER_GREGORIAN_CYCLE_ = 146097 * 24 * 60 * 60 * 1000;\n\n/**\n * Returns whether the given year is a leap year.\n *\n * @param {number} year Year part of date.\n * @return {boolean} Whether the given year is a leap year.\n */\ngoog.date.isLeapYear = function(year) {\n  'use strict';\n  // Leap year logic; the 4-100-400 rule\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n};\n\n\n/**\n * Returns whether the given year is a long ISO year.\n * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.\n *\n * @param {number} year Full year part of date.\n * @return {boolean} Whether the given year is a long ISO year.\n */\ngoog.date.isLongIsoYear = function(year) {\n  'use strict';\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\n\n  return n % 28 < 5;\n};\n\n\n/**\n * Returns the number of days for a given month.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date.\n * @return {number} The number of days for the given month.\n */\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\n  'use strict';\n  switch (month) {\n    case goog.date.month.FEB:\n      return goog.date.isLeapYear(year) ? 29 : 28;\n    case goog.date.month.JUN:\n    case goog.date.month.SEP:\n    case goog.date.month.NOV:\n    case goog.date.month.APR:\n      return 30;\n  }\n  return 31;\n};\n\n\n/**\n * Returns true if the 2 dates are in the same day.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are on the same day.\n */\ngoog.date.isSameDay = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same month.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar month.\n */\ngoog.date.isSameMonth = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same year.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar year.\n */\ngoog.date.isSameYear = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getFullYear() == now.getFullYear();\n};\n\n\n/**\n * Static function for the day of the same week that determines the week number\n * and year of week.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} the cutoff day of the same week in millis since epoch.\n * @private\n */\ngoog.date.getCutOffSameWeek_ = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var d = new Date(year, month, date);\n\n  // Default to Thursday for cut off as per ISO 8601.\n  var cutoff =\n      (opt_weekDay !== undefined) ? opt_weekDay : goog.date.weekDay.THU;\n\n  // Default to Monday for first day of the week as per ISO 8601.\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\n\n  // The d.getDay() has to be converted first to ISO weekday (Monday=0).\n  var isoday = (d.getDay() + 6) % 7;\n\n  // Position of given day in the picker grid w.r.t. first day of week\n  var daypos = (isoday - firstday + 7) % 7;\n\n  // Position of cut off day in the picker grid w.r.t. first day of week\n  var cutoffpos = (cutoff - firstday + 7) % 7;\n\n  // Unix timestamp of the midnight of the cutoff day in the week of 'd'.\n  // There might be +-1 hour shift in the result due to the daylight saving,\n  // but it doesn't affect the year.\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\n};\n\n\n/**\n * Static function for week number calculation. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The week number (1-53).\n */\ngoog.date.getWeekNumber = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  // Unix timestamp of January 1 in the year of the week.\n  var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();\n\n  // Number of week. The round() eliminates the effect of daylight saving.\n  return Math.floor(\n             Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +\n      1;\n};\n\n\n/**\n * Static function for year of the week. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The four digit year of date.\n */\ngoog.date.getYearOfWeek = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  return new Date(cutoffSameWeek).getFullYear();\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The earlier of them in time.\n * @template T,S\n */\ngoog.date.min = function(date1, date2) {\n  'use strict';\n  return date1 < date2 ? date1 : date2;\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The later of them in time.\n * @template T,S\n */\ngoog.date.max = function(date1, date2) {\n  'use strict';\n  return date1 > date2 ? date1 : date2;\n};\n\n\n/**\n * Parses a datetime string expressed in ISO 8601 format. Overwrites the date\n * and optionally the time part of the given object with the parsed values.\n *\n * @param {!goog.date.DateTime} dateTime Object whose fields will be set.\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n */\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\n  'use strict';\n  formatted = goog.string.trim(formatted);\n  var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';\n  var parts = formatted.split(delim);\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&\n      (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 format string.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {string} formatted A date expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\n  'use strict';\n  // split the formatted ISO date string into its date fields\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\n  if (!parts) {\n    return false;\n  }\n\n  var year = Number(parts[1]);\n  var month = Number(parts[2]);\n  var date = Number(parts[3]);\n  var dayOfYear = Number(parts[4]);\n  var week = Number(parts[5]);\n  // ISO weekdays start with 1, native getDay() values start with 0\n  var dayOfWeek = Number(parts[6]) || 1;\n\n  d.setFullYear(year);\n\n  if (dayOfYear) {\n    d.setDate(1);\n    d.setMonth(0);\n    var offset = dayOfYear - 1;  // offset, so 1-indexed, i.e., skip day 1\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\n  } else if (week) {\n    goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\n  } else {\n    if (month) {\n      d.setDate(1);\n      d.setMonth(month - 1);\n    }\n    if (date) {\n      d.setDate(date);\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 week string.\n * See {@link http://en.wikipedia.org/wiki/ISO_week_date}, \"Relation with the\n * Gregorian Calendar\".  The first week of a new ISO year is the week with the\n * majority of its days in the new Gregorian year.  I.e., ISO Week 1's Thursday\n * is in that year.  ISO weeks always start on Monday. So ISO Week 1 can\n * contain a few days from the previous Gregorian year.  And ISO weeks always\n * end on Sunday, so the last ISO week (Week 52 or 53) can have a few days from\n * the following Gregorian year.\n * Example: '1997-W01' lasts from 1996-12-30 to 1997-01-05.  January 1, 1997 is\n * a Wednesday. So W01's Monday is Dec.30, 1996, and Sunday is January 5, 1997.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {number} week ISO week number.\n * @param {number} dayOfWeek ISO day of week.\n * @private\n */\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\n  'use strict';\n  // calculate offset for first week\n  d.setMonth(0);\n  d.setDate(1);\n  var jsDay = d.getDay();\n  // switch Sunday (0) to index 7; ISO days are 1-indexed\n  var jan1WeekDay = jsDay || 7;\n\n  var THURSDAY = 4;\n  if (jan1WeekDay <= THURSDAY) {\n    // was extended back to Monday\n    var startDelta = 1 - jan1WeekDay;  // e.g., Thu(4) ==> -3\n  } else {\n    // was extended forward to Monday\n    startDelta = 8 - jan1WeekDay;  // e.g., Fri(5) ==> +3\n  }\n\n  // find the absolute number of days to offset from the start of year\n  // to arrive close to the Gregorian equivalent (pending adjustments above)\n  // Note: decrement week multiplier by one because 1st week is\n  // represented by dayOfWeek value\n  var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));\n\n  // convert from ISO weekday format to Gregorian calendar date\n  // note: subtract 1 because 1-indexed; offset should not include 1st of month\n  var delta = startDelta + absoluteDays - 1;\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\n  d.add(interval);\n};\n\n\n/**\n * Sets time fields based on an ISO 8601 format string.\n * Note: only time fields, not date fields.\n *\n * @param {!goog.date.DateTime} d Object whose fields will be set.\n * @param {string} formatted A time expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\n  'use strict';\n  // first strip timezone info from the end\n  var timezoneParts = formatted.match(goog.date.splitTimezoneStringRegex_);\n\n  var offsetMinutes;  // Offset from UTC if not local time\n  var formattedTime;  // The time components of the input string; no timezone.\n\n  if (timezoneParts) {\n    // Trim off the timezone characters.\n    formattedTime =\n        formatted.substring(0, formatted.length - timezoneParts[0].length);\n\n    // 'Z' indicates a UTC timestring.\n    if (timezoneParts[0] === 'Z') {\n      offsetMinutes = 0;\n    } else {\n      offsetMinutes = Number(timezoneParts[2]) * 60 + Number(timezoneParts[3]);\n      offsetMinutes *= (timezoneParts[1] == '-') ? 1 : -1;\n    }\n  } else {\n    formattedTime = formatted;\n  }\n\n  var timeParts = formattedTime.match(goog.date.splitTimeStringRegex_);\n  if (!timeParts) {\n    return false;\n  }\n\n  // We have to branch on local vs non-local times because we can't always\n  // calculate the correct UTC offset for the specified time. Specifically, the\n  // offset for daylight-savings time depends on the date being set. Therefore,\n  // when an offset is specified, we apply it verbatim.\n  if (timezoneParts) {\n    goog.asserts.assertNumber(offsetMinutes);\n\n    // Convert the date part into UTC. This is important because the local date\n    // can differ from the UTC date, and the date part of an ISO 8601 string is\n    // always set in terms of the local date.\n    var year = d.getYear();\n    var month = d.getMonth();\n    var day = d.getDate();\n    var hour = Number(timeParts[1]);\n    var minute = Number(timeParts[2]) || 0;\n    var second = Number(timeParts[3]) || 0;\n    var millisecond = timeParts[4] ? Number(timeParts[4]) * 1000 : 0;\n\n    // Date.UTC treats one- and two-digit years as if they were four-digit years\n    // beginning in 1900 (for example, a year specified as 84 becomes 1984).\n    // Since we use it in this code path, we need to account for this by\n    // incrementing the input year by 400 (in order to bypass the two-digit year\n    // behavior), and then compensate by deducting the number of milliseconds in\n    // the 400-year Gregorian calendar cycle.\n    const twoDigitYear = year >= 0 && year < 100;\n    if (twoDigitYear) {\n      year += 400;\n    }\n    let utc = Date.UTC(year, month, day, hour, minute, second, millisecond);\n    if (twoDigitYear) {\n      utc -= goog.date.MS_PER_GREGORIAN_CYCLE_;\n    }\n    d.setTime(utc + offsetMinutes * 60000);\n  } else {\n    d.setHours(Number(timeParts[1]));\n    d.setMinutes(Number(timeParts[2]) || 0);\n    d.setSeconds(Number(timeParts[3]) || 0);\n    d.setMilliseconds(timeParts[4] ? Number(timeParts[4]) * 1000 : 0);\n  }\n\n  return true;\n};\n\n\n/**\n * Pads the year to 4 unsigned digits, or 6 digits with a sign.\n * @param {number} year\n * @return {string}\n */\ngoog.date.padYear_ = function(year) {\n  const sign = year < 0 ? '-' : year >= 10000 ? '+' : '';\n  return sign + goog.string.padNumber(Math.abs(year), sign ? 6 : 4);\n};\n\n\n/**\n * Class representing a date/time interval. Used for date calculations.\n * <pre>\n * new goog.date.Interval(0, 1) // One month\n * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour\n * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day\n * </pre>\n *\n * @param {number|string=} opt_years Years or string representing date part.\n * @param {number=} opt_months Months or number of whatever date part specified\n *     by first parameter.\n * @param {number=} opt_days Days.\n * @param {number=} opt_hours Hours.\n * @param {number=} opt_minutes Minutes.\n * @param {number=} opt_seconds Seconds.\n * @constructor\n * @struct\n * @final\n */\ngoog.date.Interval = function(\n    opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\n  'use strict';\n  if (typeof opt_years === 'string') {\n    var type = opt_years;\n    var interval = /** @type {number} */ (opt_months);\n    /** @type {number} */\n    this.years = type == goog.date.Interval.YEARS ? interval : 0;\n    /** @type {number} */\n    this.months = type == goog.date.Interval.MONTHS ? interval : 0;\n    /** @type {number} */\n    this.days = type == goog.date.Interval.DAYS ? interval : 0;\n    /** @type {number} */\n    this.hours = type == goog.date.Interval.HOURS ? interval : 0;\n    /** @type {number} */\n    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\n    /** @type {number} */\n    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\n  } else {\n    this.years = /** @type {number} */ (opt_years) || 0;\n    this.months = opt_months || 0;\n    this.days = opt_days || 0;\n    this.hours = opt_hours || 0;\n    this.minutes = opt_minutes || 0;\n    this.seconds = opt_seconds || 0;\n  }\n};\n\n\n/**\n * Parses an XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param  {string} duration An XML schema duration in textual format.\n *     Recurring durations and weeks are not supported.\n * @return {goog.date.Interval} The duration as a goog.date.Interval or null\n *     if the parse fails.\n */\ngoog.date.Interval.fromIsoString = function(duration) {\n  'use strict';\n  var parts = duration.match(goog.date.splitDurationRegex_);\n  if (!parts) {\n    return null;\n  }\n\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\n    return null;\n  }\n\n  var negative = parts[1];\n  var years = parseInt(parts[2], 10) || 0;\n  var months = parseInt(parts[3], 10) || 0;\n  var days = parseInt(parts[4], 10) || 0;\n  var hours = parseInt(parts[6], 10) || 0;\n  var minutes = parseInt(parts[7], 10) || 0;\n  var seconds = parseFloat(parts[8]) || 0;\n  return negative ?\n      new goog.date.Interval(\n          -years, -months, -days, -hours, -minutes, -seconds) :\n      new goog.date.Interval(years, months, days, hours, minutes, seconds);\n};\n\n\n/**\n * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param {boolean=} opt_verbose Include zero fields in the duration string.\n * @return {?string} An XML schema duration in ISO 8601 extended format,\n *     or null if the interval contains both positive and negative fields.\n */\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\n  'use strict';\n  var minField = Math.min(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  var maxField = Math.max(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  if (minField < 0 && maxField > 0) {\n    return null;\n  }\n\n  // Return 0 seconds if all fields are zero.\n  if (!opt_verbose && minField == 0 && maxField == 0) {\n    return 'PT0S';\n  }\n\n  var res = [];\n\n  // Add sign and 'P' prefix.\n  if (minField < 0) {\n    res.push('-');\n  }\n  res.push('P');\n\n  // Add date.\n  if (this.years || opt_verbose) {\n    res.push(Math.abs(this.years) + 'Y');\n  }\n  if (this.months || opt_verbose) {\n    res.push(Math.abs(this.months) + 'M');\n  }\n  if (this.days || opt_verbose) {\n    res.push(Math.abs(this.days) + 'D');\n  }\n\n  // Add time.\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\n    res.push('T');\n    if (this.hours || opt_verbose) {\n      res.push(Math.abs(this.hours) + 'H');\n    }\n    if (this.minutes || opt_verbose) {\n      res.push(Math.abs(this.minutes) + 'M');\n    }\n    if (this.seconds || opt_verbose) {\n      res.push(Math.abs(this.seconds) + 'S');\n    }\n  }\n\n  return res.join('');\n};\n\n\n/**\n * Tests whether the given interval is equal to this interval.\n * Note, this is a simple field-by-field comparison, it doesn't\n * account for comparisons like \"12 months == 1 year\".\n *\n * @param {goog.date.Interval} other The interval to test.\n * @return {boolean} Whether the intervals are equal.\n */\ngoog.date.Interval.prototype.equals = function(other) {\n  'use strict';\n  return other.years == this.years && other.months == this.months &&\n      other.days == this.days && other.hours == this.hours &&\n      other.minutes == this.minutes && other.seconds == this.seconds;\n};\n\n\n/**\n * @return {!goog.date.Interval} A clone of the interval object.\n */\ngoog.date.Interval.prototype.clone = function() {\n  'use strict';\n  return new goog.date.Interval(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n};\n\n\n/**\n * Years constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.YEARS = 'y';\n\n\n/**\n * Months constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MONTHS = 'm';\n\n\n/**\n * Days constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.DAYS = 'd';\n\n\n/**\n * Hours constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.HOURS = 'h';\n\n\n/**\n * Minutes constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MINUTES = 'n';\n\n\n/**\n * Seconds constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.SECONDS = 's';\n\n\n/**\n * @return {boolean} Whether all fields of the interval are zero.\n */\ngoog.date.Interval.prototype.isZero = function() {\n  'use strict';\n  return this.years == 0 && this.months == 0 && this.days == 0 &&\n      this.hours == 0 && this.minutes == 0 && this.seconds == 0;\n};\n\n\n/**\n * @return {!goog.date.Interval} Negative of this interval.\n */\ngoog.date.Interval.prototype.getInverse = function() {\n  'use strict';\n  return this.times(-1);\n};\n\n\n/**\n * Calculates n * (this interval) by memberwise multiplication.\n * @param {number} n An integer.\n * @return {!goog.date.Interval} n * this.\n */\ngoog.date.Interval.prototype.times = function(n) {\n  'use strict';\n  return new goog.date.Interval(\n      this.years * n, this.months * n, this.days * n, this.hours * n,\n      this.minutes * n, this.seconds * n);\n};\n\n\n/**\n * Gets the total number of seconds in the time interval. Assumes that months\n * and years are empty.\n * @return {number} Total number of seconds in the interval.\n */\ngoog.date.Interval.prototype.getTotalSeconds = function() {\n  'use strict';\n  goog.asserts.assert(this.years == 0 && this.months == 0);\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +\n      this.seconds;\n};\n\n\n/**\n * Adds the Interval in the argument to this Interval field by field.\n *\n * @param {goog.date.Interval} interval The Interval to add.\n */\ngoog.date.Interval.prototype.add = function(interval) {\n  'use strict';\n  this.years += interval.years;\n  this.months += interval.months;\n  this.days += interval.days;\n  this.hours += interval.hours;\n  this.minutes += interval.minutes;\n  this.seconds += interval.seconds;\n};\n\n\n/**\n * @typedef {(?Date|?goog.date.Date)}\n */\ngoog.date.DateLike;\n\n\n/**\n * Class representing a date. Defaults to current date if none is specified.\n *\n * Implements most methods of the native js Date object (except the time related\n * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just\n * as if goog.date.Date was a synonym of Date. To make this more transparent,\n * Closure APIs should accept goog.date.DateLike instead of the real Date\n * object.\n *\n * @param {number|goog.date.DateLike=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date\n *     determined by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @constructor\n * @struct\n * @see goog.date.DateTime\n */\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\n  'use strict';\n  /** @protected {!Date} The wrapped date or datetime. */\n  this.date;\n  // goog.date.DateTime assumes that only this.date is added in this ctor.\n  if (typeof opt_year === 'number') {\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\n    this.maybeFixDst_(opt_date || 1);\n  } else if (goog.isObject(opt_year)) {\n    this.date = this.buildDate_(\n        opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\n    this.maybeFixDst_(opt_year.getDate());\n  } else {\n    this.date = new Date(goog.now());\n    var expectedDate = this.date.getDate();\n    this.date.setHours(0);\n    this.date.setMinutes(0);\n    this.date.setSeconds(0);\n    this.date.setMilliseconds(0);\n    // In some time zones there is no \"0\" hour on certain days during DST.\n    // Adjust here, if necessary. See:\n    // https://github.com/google/closure-library/issues/34.\n    this.maybeFixDst_(expectedDate);\n  }\n};\n\n\n/**\n * new Date(y, m, d) treats years in the interval [0, 100) as two digit years,\n * adding 1900 to them. This method ensures that calling the date constructor\n * as a copy constructor returns a value that is equal to the passed in\n * date value by explicitly setting the full year.\n * @private\n * @param {number} fullYear The full year (including century).\n * @param {number} month The month, from 0-11.\n * @param {number} date The day of the month.\n * @return {!Date} The constructed Date object.\n */\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\n  'use strict';\n  var d = new Date(fullYear, month, date);\n  if (fullYear >= 0 && fullYear < 100) {\n    // Can't just setFullYear as new Date() can flip over for e.g. month = 13.\n    d.setFullYear(d.getFullYear() - 1900);\n  }\n  return d;\n};\n\n\n/**\n * First day of week. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstDayOfWeek_ =\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\n\n\n/**\n * The cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstWeekCutOffDay_ =\n    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\n\n\n/**\n * @return {!goog.date.Date} A clone of the date object.\n */\ngoog.date.Date.prototype.clone = function() {\n  'use strict';\n  var date = new goog.date.Date(this.date);\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\n\n  return date;\n};\n\n\n/**\n * @return {number} The four digit year of date.\n */\ngoog.date.Date.prototype.getFullYear = function() {\n  'use strict';\n  return this.date.getFullYear();\n};\n\n\n/**\n * Alias for getFullYear.\n *\n * @return {number} The four digit year of date.\n * @see #getFullYear\n */\ngoog.date.Date.prototype.getYear = function() {\n  'use strict';\n  return this.getFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date, 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getMonth = function() {\n  'use strict';\n  return /** @type {goog.date.month} */ (this.date.getMonth());\n};\n\n\n/**\n * @return {number} The date of month.\n */\ngoog.date.Date.prototype.getDate = function() {\n  'use strict';\n  return this.date.getDate();\n};\n\n\n/**\n * Returns the number of milliseconds since 1 January 1970 00:00:00.\n *\n * @return {number} The number of milliseconds since 1 January 1970 00:00:00.\n */\ngoog.date.Date.prototype.getTime = function() {\n  'use strict';\n  return this.date.getTime();\n};\n\n\n/**\n * @return {number} The day of week, US style. 0 = Sun, 6 = Sat.\n */\ngoog.date.Date.prototype.getDay = function() {\n  'use strict';\n  return this.date.getDay();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week, ISO style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getIsoWeekday = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getWeekday = function() {\n  'use strict';\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The four digit year of date according to universal time.\n */\ngoog.date.Date.prototype.getUTCFullYear = function() {\n  'use strict';\n  return this.date.getUTCFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date according to universal time,\n *     0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getUTCMonth = function() {\n  'use strict';\n  return /** @type {goog.date.month} */ (this.date.getUTCMonth());\n};\n\n\n/**\n * @return {number} The date of month according to universal time.\n */\ngoog.date.Date.prototype.getUTCDate = function() {\n  'use strict';\n  return this.date.getUTCDate();\n};\n\n\n/**\n * @return {number} The day of week according to universal time, US style.\n *     0 = Sun, 1 = Mon, 6 = Sat.\n */\ngoog.date.Date.prototype.getUTCDay = function() {\n  'use strict';\n  return this.date.getDay();\n};\n\n\n/**\n * @return {number} The hours value according to universal time.\n */\ngoog.date.Date.prototype.getUTCHours = function() {\n  'use strict';\n  return this.date.getUTCHours();\n};\n\n\n/**\n * @return {number} The minutes value according to universal time.\n */\ngoog.date.Date.prototype.getUTCMinutes = function() {\n  'use strict';\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week according to universal time, ISO\n *     style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to universal time and\n *     firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getUTCWeekday = function() {\n  'use strict';\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The first day of the week. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\n  'use strict';\n  return this.firstDayOfWeek_;\n};\n\n\n/**\n * @return {number} The cut off weekday used for week number calculations.\n *     0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\n  'use strict';\n  return this.firstWeekCutOffDay_;\n};\n\n\n/**\n * @return {number} The number of days for the selected month.\n */\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\n  'use strict';\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\n};\n\n\n/**\n * @return {number} The week number.\n */\ngoog.date.Date.prototype.getWeekNumber = function() {\n  'use strict';\n  return goog.date.getWeekNumber(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * Returns year in \u201cWeek of Year\u201d based calendars in which the year transition\n * occurs on a week boundary.\n * @return {number} The four digit year in \"Week of Year\"\n */\ngoog.date.Date.prototype.getYearOfWeek = function() {\n  'use strict';\n  return goog.date.getYearOfWeek(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * @return {number} The day of year.\n */\ngoog.date.Date.prototype.getDayOfYear = function() {\n  'use strict';\n  var dayOfYear = this.getDate();\n  var year = this.getFullYear();\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\n  }\n\n  return dayOfYear;\n};\n\n\n/**\n * Returns timezone offset. The timezone offset is the delta in minutes between\n * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time\n * prevents this value from being constant.\n *\n * @return {number} The timezone offset.\n */\ngoog.date.Date.prototype.getTimezoneOffset = function() {\n  'use strict';\n  return this.date.getTimezoneOffset();\n};\n\n\n/**\n * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z\n * for UTC.\n *\n * @return {string} The timezone offset as a string.\n */\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\n  'use strict';\n  var tz;\n  var offset = this.getTimezoneOffset();\n\n  if (offset == 0) {\n    tz = 'Z';\n  } else {\n    var n = Math.abs(offset) / 60;\n    var h = Math.floor(n);\n    var m = (n - h) * 60;\n    tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +\n        goog.string.padNumber(m, 2);\n  }\n\n  return tz;\n};\n\n\n/**\n * Sets the date.\n *\n * @param {goog.date.Date} date Date object to set date from.\n */\ngoog.date.Date.prototype.set = function(date) {\n  'use strict';\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n};\n\n\n/**\n * Sets the year part of the date.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setFullYear = function(year) {\n  'use strict';\n  this.date.setFullYear(year);\n};\n\n\n/**\n * Alias for setFullYear.\n *\n * @param {number} year Four digit year.\n * @see #setFullYear\n */\ngoog.date.Date.prototype.setYear = function(year) {\n  'use strict';\n  this.setFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date.\n *\n * TODO(nnaze): Update type to goog.date.month.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setMonth = function(month) {\n  'use strict';\n  this.date.setMonth(month);\n};\n\n\n/**\n * Sets the day part of the date.\n *\n * @param {number} date The day part.\n */\ngoog.date.Date.prototype.setDate = function(date) {\n  'use strict';\n  this.date.setDate(date);\n};\n\n\n/**\n * Sets the value of the date object as expressed in the number of milliseconds\n * since 1 January 1970 00:00:00.\n *\n * @param {number} ms Number of milliseconds since 1 Jan 1970.\n */\ngoog.date.Date.prototype.setTime = function(ms) {\n  'use strict';\n  this.date.setTime(ms);\n};\n\n\n/**\n * Sets the year part of the date according to universal time.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\n  'use strict';\n  this.date.setUTCFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date according to universal time.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setUTCMonth = function(month) {\n  'use strict';\n  this.date.setUTCMonth(month);\n};\n\n\n/**\n * Sets the day part of the date according to universal time.\n *\n * @param {number} date The UTC date.\n */\ngoog.date.Date.prototype.setUTCDate = function(date) {\n  'use strict';\n  this.date.setUTCDate(date);\n};\n\n\n/**\n * Sets the first day of week.\n *\n * @param {number} day 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\n  'use strict';\n  this.firstDayOfWeek_ = day;\n};\n\n\n/**\n * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n *\n * @param {number} day The cut off weekday.\n */\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\n  'use strict';\n  this.firstWeekCutOffDay_ = day;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n */\ngoog.date.Date.prototype.add = function(interval) {\n  'use strict';\n  if (interval.years || interval.months) {\n    // As months have different number of days adding a month to Jan 31 by just\n    // setting the month would result in a date in early March rather than Feb\n    // 28 or 29. Doing it this way overcomes that problem.\n\n    // adjust year and month, accounting for both directions\n    var month = this.getMonth() + interval.months + interval.years * 12;\n    var year = this.getYear() + Math.floor(month / 12);\n    month %= 12;\n    if (month < 0) {\n      month += 12;\n    }\n\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\n    var date = Math.min(daysInTargetMonth, this.getDate());\n\n    // avoid inadvertently causing rollovers to adjacent months\n    this.setDate(1);\n\n    this.setFullYear(year);\n    this.setMonth(month);\n    this.setDate(date);\n  }\n\n  if (interval.days) {\n    // Because Javascript Date objects are being used and the 'year' argument\n    // to the constructor has special behavior for values 0-99 (inclusive),\n    // enable correcting for those special values being interpreted as relative\n    // to the year 1900 (rather than absolute year numbers as with all other\n    // integer values for that argument).\n    //\n    // Since only the constructor taking a separate field for the 'year' of\n    // a date behaves this way, the adjustment value depends only on the initial\n    // date. This is because the interval-adjusted date value uses a Date\n    // constructor that avoids the problematic, special behavior for years 0-99.\n    const initialYear = this.getYear();\n    const yearAdjustment = initialYear >= 0 && initialYear <= 99 ? -1900 : 0;\n\n    // Convert the days to milliseconds and add it to the UNIX timestamp.\n    // Taking noon helps to avoid 1 day error due to the daylight saving.\n    const noon = new Date(initialYear, this.getMonth(), this.getDate(), 12);\n    const result = new Date(noon.getTime() + interval.days * 86400000);\n\n    // Set date to 1 to prevent rollover caused by setting the year or month.\n    this.setDate(1);\n    this.setFullYear(result.getFullYear() + yearAdjustment);\n    this.setMonth(result.getMonth());\n    this.setDate(result.getDate());\n\n    this.maybeFixDst_(result.getDate());\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date. Consistent with the\n * standard built-in Date#toISOString method, the year is either four digits\n * (YYYY) or six with a sign prefix (\u00b1YYYYYY), since ISO 8601 requires the\n * number of digits in the year to be agreed upon in advance.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n */\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var str = [\n    goog.date.padYear_(this.getFullYear()),\n    goog.string.padNumber(this.getMonth() + 1, 2),\n    goog.string.padNumber(this.getDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date according to universal time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date according to\n *     universal time.\n */\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var str = [\n    goog.date.padYear_(this.getUTCFullYear()),\n    goog.string.padNumber(this.getUTCMonth() + 1, 2),\n    goog.string.padNumber(this.getUTCDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Tests whether given date is equal to this Date.\n * Note: This ignores units more precise than days (hours and below)\n * and also ignores timezone considerations.\n *\n * @param {goog.date.Date} other The date to compare.\n * @return {boolean} Whether the given date is equal to this one.\n */\ngoog.date.Date.prototype.equals = function(other) {\n  'use strict';\n  return !!(\n      other && this.getYear() == other.getYear() &&\n      this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date.\n * @override\n */\ngoog.date.Date.prototype.toString = function() {\n  'use strict';\n  return this.toIsoString();\n};\n\n\n/**\n * Fixes date to account for daylight savings time in browsers that fail to do\n * so automatically.\n * @param {number} expected Expected date.\n * @private\n */\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\n  'use strict';\n  if (this.getDate() != expected) {\n    var dir = this.getDate() < expected ? 1 : -1;\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\n  }\n};\n\n\n/**\n * @return {number} Value of wrapped date.\n * @override\n */\ngoog.date.Date.prototype.valueOf = function() {\n  'use strict';\n  return this.date.valueOf();\n};\n\n\n/**\n * Compares two dates.  May be used as a sorting function.\n * @see goog.array.sort\n * @param {!goog.date.DateLike} date1 Date to compare.\n * @param {!goog.date.DateLike} date2 Date to compare.\n * @return {number} Comparison result. 0 if dates are the same, less than 0 if\n *     date1 is earlier than date2, greater than 0 if date1 is later than date2.\n */\ngoog.date.Date.compare = function(date1, date2) {\n  'use strict';\n  return date1.getTime() - date2.getTime();\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.Date`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.Date} Parsed date or null if parse fails.\n */\ngoog.date.Date.fromIsoString = function(formatted) {\n  'use strict';\n  var ret = new goog.date.Date(2000);\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\n};\n\n\n\n/**\n * Class representing a date and time. Defaults to current date and time if none\n * is specified.\n *\n * Implements most methods of the native js Date object and can be used\n * interchangeably with it just as if goog.date.DateTime was a subclass of Date.\n *\n * @param {(number|{getTime:?}|null)=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date determined\n *     by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @param {number=} opt_hours Hours, 0 - 23.\n * @param {number=} opt_minutes Minutes, 0 - 59.\n * @param {number=} opt_seconds Seconds, 0 - 61.\n * @param {number=} opt_milliseconds Milliseconds, 0 - 999.\n * @constructor\n * @struct\n * @extends {goog.date.Date}\n */\ngoog.date.DateTime = function(\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\n    opt_milliseconds) {\n  'use strict';\n  if (typeof opt_year === 'number') {\n    /** @override */\n    this.date = new Date(\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    this.date = new Date(\n        opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\n  }\n};\ngoog.inherits(goog.date.DateTime, goog.date.Date);\n\n\n/**\n * @param {number} timestamp Number of milliseconds since Epoch.\n * @return {!goog.date.DateTime}\n */\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\n  'use strict';\n  var date = new goog.date.DateTime();\n  date.setTime(timestamp);\n  return date;\n};\n\n\n/**\n * Creates a DateTime from a datetime string expressed in RFC 822 format.\n *\n * @param {string} formatted A date or datetime expressed in RFC 822 format.\n * @return {goog.date.DateTime} Parsed date or null if parse fails.\n */\ngoog.date.DateTime.fromRfc822String = function(formatted) {\n  'use strict';\n  var date = new Date(formatted);\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\n};\n\n\n/**\n * Returns the hours part of the datetime.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.getHours = function() {\n  'use strict';\n  return this.date.getHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.getMinutes = function() {\n  'use strict';\n  return this.date.getMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getSeconds = function() {\n  'use strict';\n  return this.date.getSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getMilliseconds = function() {\n  'use strict';\n  return this.date.getMilliseconds();\n};\n\n\n/**\n * Returns the day of week according to universal time, US style.\n *\n * @return {goog.date.weekDay} Day of week, 0 = Sun, 1 = Mon, 6 = Sat.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCDay = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ (this.date.getUTCDay());\n};\n\n\n/**\n * Returns the hours part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCHours = function() {\n  'use strict';\n  return this.date.getUTCHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\n  'use strict';\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\n  'use strict';\n  return this.date.getUTCSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\n  'use strict';\n  return this.date.getUTCMilliseconds();\n};\n\n\n/**\n * Sets the hours part of the datetime.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setHours = function(hours) {\n  'use strict';\n  this.date.setHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\n  'use strict';\n  this.date.setMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\n  'use strict';\n  this.date.setSeconds(seconds);\n};\n\n\n/**\n * Sets the milliseconds part of the datetime.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\n  'use strict';\n  this.date.setMilliseconds(ms);\n};\n\n\n/**\n * Sets the hours part of the datetime according to universal time.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\n  'use strict';\n  this.date.setUTCHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime according to universal time.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\n  'use strict';\n  this.date.setUTCMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\n  'use strict';\n  this.date.setUTCSeconds(seconds);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\n  'use strict';\n  this.date.setUTCMilliseconds(ms);\n};\n\n\n/**\n * @return {boolean} Whether the datetime is aligned to midnight.\n */\ngoog.date.DateTime.prototype.isMidnight = function() {\n  'use strict';\n  return this.getHours() == 0 && this.getMinutes() == 0 &&\n      this.getSeconds() == 0 && this.getMilliseconds() == 0;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n * @override\n */\ngoog.date.DateTime.prototype.add = function(interval) {\n  'use strict';\n  goog.date.Date.prototype.add.call(this, interval);\n\n  if (interval.hours) {\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\n  }\n  if (interval.minutes) {\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\n  }\n  if (interval.seconds) {\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time. Consistent with the\n * standard built-in Date#toISOString method, the year is either four digits\n * (YYYY) or six with a sign prefix (\u00b1YYYYYY), since ISO 8601 requires the\n * number of digits in the year to be agreed upon in advance.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n */\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) + ':' +\n        goog.string.padNumber(this.getMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getSeconds(), 2) +\n        (opt_tz ? this.getTimezoneOffsetString() : '');\n  }\n\n  return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +\n      goog.string.padNumber(this.getMinutes(), 2) +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns XML Schema 2 string representation of date/time.\n * The return value is also ISO 8601 compliant.\n *\n * @param {boolean=} opt_timezone Should the timezone offset be included in the\n *     string?.\n * @return {string} XML Schema 2 string representation of date/time.\n */\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\n  'use strict';\n  return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +\n      goog.string.padNumber(this.getHours(), 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2) + ':' +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_timezone ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time according to universal\n * time.\n *\n * @param {boolean=} opt_verbose Whether the opt_verbose format should be\n *     returned instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date/time according to\n *     universal time.\n * @override\n */\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +\n        goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n  }\n\n  return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +\n      goog.string.padNumber(this.getUTCMinutes(), 2) +\n      goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Returns RFC 3339 string representation of datetime in UTC.\n *\n * @return {string} A UTC datetime expressed in RFC 3339 format.\n */\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\n  'use strict';\n  var date = this.toUTCIsoString(true);\n  var millis = this.getUTCMilliseconds();\n  return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';\n};\n\n\n/**\n * Tests whether given datetime is exactly equal to this DateTime.\n *\n * @param {goog.date.Date} other The datetime to compare.\n * @return {boolean} Whether the given datetime is exactly equal to this one.\n * @override\n */\ngoog.date.DateTime.prototype.equals = function(other) {\n  'use strict';\n  return this.getTime() == other.getTime();\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toString = function() {\n  'use strict';\n  return this.toIsoString();\n};\n\n\n/**\n * Generates time label for the datetime, e.g., '5:30 AM'.\n * By default this does not pad hours (e.g., to '05:30') and it does add\n * an am/pm suffix.\n * TODO(timman): i18n -- hardcoding time format like this is bad.  E.g., in CJK\n *               locales, need Chinese characters for hour and minute units.\n * @param {boolean=} opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.\n * @param {boolean=} opt_showAmPm Whether to show the 'am' and 'pm' suffix.\n * @param {boolean=} opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm',\n *                                      but '5:01pm' remains '5:01pm'.\n * @return {string} The time label.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.FULL_TIME or\n *     goog.i18n.DateTimeFormat.Format.LONG_TIME or\n *     goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or\n *     goog.i18n.DateTimeFormat.Format.SHORT_TIME.\n */\ngoog.date.DateTime.prototype.toUsTimeString = function(\n    opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\n  'use strict';\n  var hours = this.getHours();\n\n  // show am/pm marker by default\n  if (opt_showAmPm === undefined) {\n    opt_showAmPm = true;\n  }\n\n  // 12pm\n  var isPM = hours == 12;\n\n  // change from 1-24 to 1-12 basis\n  if (hours > 12) {\n    hours -= 12;\n    isPM = true;\n  }\n\n  // midnight is expressed as \"12am\", but if am/pm marker omitted, keep as '0'\n  if (hours == 0 && opt_showAmPm) {\n    hours = 12;\n  }\n\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\n  var minutes = this.getMinutes();\n  if (!opt_omitZeroMinutes || minutes > 0) {\n    label += ':' + goog.string.padNumber(minutes, 2);\n  }\n\n  // by default, show am/pm suffix\n  if (opt_showAmPm) {\n    label += isPM ? ' PM' : ' AM';\n  }\n  return label;\n};\n\n\n/**\n * Generates time label for the datetime in standard ISO 24-hour time format.\n * E.g., '06:00:00' or '23:30:15'.\n * @param {boolean=} opt_showSeconds Whether to shows seconds. Defaults to TRUE.\n * @return {string} The time label.\n */\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\n  'use strict';\n  var hours = this.getHours();\n  var label = goog.string.padNumber(hours, 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2);\n  if (opt_showSeconds === undefined || opt_showSeconds) {\n    label += ':' + goog.string.padNumber(this.getSeconds(), 2);\n  }\n  return label;\n};\n\n\n/**\n * @return {!goog.date.DateTime} A clone of the datetime object.\n * @override\n */\ngoog.date.DateTime.prototype.clone = function() {\n  'use strict';\n  var date = new goog.date.DateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.DateTime`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.DateTime} Parsed date or null if parse fails.\n * @override\n */\ngoog.date.DateTime.fromIsoString = function(formatted) {\n  'use strict';\n  var ret = new goog.date.DateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * Avoid including base.js more than once. This is strictly discouraged and not\n * supported. goog.require(...) won't work properly in that case.\n *\n * @suppress {deprecated} Users cannot remove deprecated uses here.\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n/**\n * Reference to the global object.\n * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-global-object\n *\n * More info on this implementation here:\n * https://docs.google.com/document/d/1NAeW4Wk7I7FV0Y2tcUFvQdGMc89k2vdgSXInw8_nvCI/edit\n *\n * @const\n * @suppress {undefinedVars} self won't be referenced unless `this` is falsy.\n * @type {!Global}\n */\ngoog.global =\n    // Check `this` first for backwards compatibility.\n    // Valid unless running as an ES module or in a function wrapper called\n    //   without setting `this` properly.\n    // Note that base.js can't usefully be imported as an ES module, but it may\n    // be compiled into bundles that are loadable as ES modules.\n    this ||\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n    // For in-page browser environments and workers.\n    self;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, `CLOSURE_UNCOMPILED_DEFINES` may be defined before\n * loading base.js.  If a key is defined in `CLOSURE_UNCOMPILED_DEFINES`,\n * `goog.define` will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * Currently the Closure Compiler will only recognize very simple definitions of\n * this value when looking for values to apply to compiled code and ignore all\n * other references.  Specifically, it looks the value defined at the variable\n * declaration, as with the example above.\n *\n * TODO(b/202066289): Improve the recognized definitions.\n *\n * @type {!Object<string, (string|number|boolean)>|null|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name The name of the object that this file defines.\n * @param {*=} object The object to expose at the end of the path.\n * @param {boolean=} overwriteImplicit If object is set and a previous call\n *     implicitly constructed the namespace given by name, this parameter\n *     controls whether object should overwrite the implicitly constructed\n *     namespace or be merged into it. Defaults to false.\n * @param {?Object=} objectToExportTo The object to add the path to; if this\n *     field is not specified, its value defaults to `goog.global`.\n * @private\n */\ngoog.exportPath_ = function(name, object, overwriteImplicit, objectToExportTo) {\n  var parts = name.split('.');\n  var cur = objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && typeof cur.execScript != 'undefined') {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && object !== undefined) {\n      if (!overwriteImplicit && goog.isObject(object) &&\n          goog.isObject(cur[part])) {\n        // Merge properties on object (the input parameter) with the existing\n        // implicitly defined namespace, so as to not clobber previously\n        // defined child namespaces.\n        for (var prop in object) {\n          if (object.hasOwnProperty(prop)) {\n            cur[part][prop] = object[prop];\n          }\n        }\n      } else {\n        // Either there is no existing implicit namespace, or overwriteImplicit\n        // is set to true, so directly assign object (the input parameter) to\n        // the namespace.\n        cur[part] = object;\n      }\n    } else if (cur[part] && cur[part] !== Object.prototype[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler options or the\n * value set in the CLOSURE_DEFINES object. Returns the defined value so that it\n * can be used safely in modules. Note that the value type MUST be either\n * boolean, number, or string.\n *\n * @param {string} name The distinguished name to provide.\n * @param {T} defaultValue\n * @return {T} The defined value.\n * @template T\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    var uncompiledDefines = goog.global.CLOSURE_UNCOMPILED_DEFINES;\n    var defines = goog.global.CLOSURE_DEFINES;\n    if (uncompiledDefines &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (uncompiledDefines).nodeType === undefined &&\n        Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {\n      value = uncompiledDefines[name];\n    } else if (\n        defines &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (defines).nodeType === undefined &&\n        Object.prototype.hasOwnProperty.call(defines, name)) {\n      value = defines[name];\n    }\n  }\n  return value;\n};\n\n\n/**\n * @define {number} Integer year indicating the set of browser features that are\n * guaranteed to be present.  This is defined to include exactly features that\n * work correctly on all \"modern\" browsers that are stable on January 1 of the\n * specified year.  For example,\n * ```js\n * if (goog.FEATURESET_YEAR >= 2019) {\n *   // use APIs known to be available on all major stable browsers Jan 1, 2019\n * } else {\n *   // polyfill for older browsers\n * }\n * ```\n * This is intended to be the primary define for removing\n * unnecessary browser compatibility code (such as ponyfills and workarounds),\n * and should inform the default value for most other defines:\n * ```js\n * const ASSUME_NATIVE_PROMISE =\n *     goog.define('ASSUME_NATIVE_PROMISE', goog.FEATURESET_YEAR >= 2016);\n * ```\n *\n * The default assumption is that IE9 is the lowest supported browser, which was\n * first available Jan 1, 2012.\n *\n * TODO(mathiasb): Reference more thorough documentation when it's available.\n */\ngoog.FEATURESET_YEAR = goog.define('goog.FEATURESET_YEAR', 2012);\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production. It can be easily stripped\n * by specifying --define goog.DEBUG=false to the Closure Compiler aka\n * JSCompiler. For example, most toString() methods should be declared inside an\n * \"if (goog.DEBUG)\" conditional because they are generally used for debugging\n * purposes and it is difficult for the JSCompiler to statically determine\n * whether they are used.\n */\ngoog.DEBUG = goog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as a compiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he).\n *\n * MOE:begin_intracomment_strip\n * See http://g3doc/i18n/identifiers/g3doc/synonyms.\n * MOE:end_intracomment_strip\n */\ngoog.LOCALE = goog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the compiler.\n */\ngoog.TRUSTED_SITE = goog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.DISALLOW_TEST_ONLY_CODE =\n    goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING =\n    goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n// MOE:begin_strip\n/**\n * Read a flag from the runtime flags object.\n * @param {number} googFlagId Enum ordinal\n * @param {boolean} defaultValue Value to return if the flag is not given\n * @return {boolean}\n */\ngoog.readFlagInternalDoNotUseOrElse = function(googFlagId, defaultValue) {\n  var obj = goog.getObjectByName(goog.FLAGS_OBJECT_);\n  var val = obj && obj[googFlagId];\n  return val != null ? val : defaultValue;\n};\n\n\n/**\n * Name of the object to look for when looking up runtime flag values.  May be a\n * fully qualified object name (e.g. 'foo.bar').\n * @define {string}\n * @private\n */\ngoog.FLAGS_OBJECT_ = goog.define('goog.FLAGS_OBJECT', 'CLOSURE_FLAGS');\n\n\n/**\n * Default value for the STAGING flag.  Defaults to `true`, indicating that\n * flags are enabled by default once they reach the STAGING lifecycle stage.\n * Risk-averse products should set this to `false` in their production builds.\n * This is only necessary for non-Boq products because Boq Web configures this\n * via the goog.flag system by default.\n *\n * @define {boolean}\n */\ngoog.FLAGS_STAGING_DEFAULT = goog.define('goog.FLAGS_STAGING_DEFAULT', true);\n\n\n/**\n * Read a toggle's value.  This should not be called directly.  Use the\n * `toggle_provider` build rule instead.  See go/toggle-provider.\n * @param {string} name\n * @return {boolean}\n */\ngoog.readToggleInternalDoNotCallDirectly = function(name) {\n  var ordinals = typeof CLOSURE_TOGGLE_ORDINALS === 'object' ?\n      CLOSURE_TOGGLE_ORDINALS :\n      undefined;\n  var ordinal = ordinals && ordinals[name];\n  if (typeof ordinal !== 'number') return Boolean(ordinal);\n  return Boolean(\n      goog.TOGGLES_[Math.floor(ordinal / 30)] & (1 << (ordinal % 30)));\n};\n\n\n/**\n * Bootstrap variable mapping toggle names to ordinals.  This is intended to be\n * read by JSCompiler to replace goog.readToggle...() calls with direct lookups,\n * but is also used by the debug-mode version of the toggle reader.\n * @const {!Object<string, number|boolean>|undefined}\n */\ngoog.global.CLOSURE_TOGGLE_ORDINALS;\n\n\n/**\n * @define {string} Global variable to check for toggles.\n * @private\n */\ngoog.TOGGLE_VAR_ = goog.define('goog.TOGGLE_VAR', '_F_toggles');\n\n\n/** @private @const {!Array<number>} */\ngoog.TOGGLES_ = goog.global[goog.TOGGLE_VAR_] || [];\n// MOE:end_strip\n\n\n/**\n * A hook for providing an object that should be used to track the \"legacy\n * namespaces\". The legacy namespace is where symbols from `goog.provide` as\n * well as symbols from `goog.module` with `goog.module.declareLegacyNamespace`\n * are placed.\n *\n * If this isn't specified, `goog.global` will be considered the legacy\n * namespace object.\n *\n * @type {!Object|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_LEGACY_NAMESPACE_OBJECT;\n\n\n/**\n * @type {!Object}\n * @private\n */\ngoog.LEGACY_NAMESPACE_OBJECT_ =\n    (!COMPILED &&\n     typeof CLOSURE_UNCOMPILED_LEGACY_NAMESPACE_OBJECT !== 'undefined') ?\n    CLOSURE_UNCOMPILED_LEGACY_NAMESPACE_OBJECT :\n    goog.global;\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * deprecated Use goog.module (see b/159289405)\n */\ngoog.provide = function(name) {\n  if (goog.isInModuleLoader_()) {\n    throw new Error('goog.provide cannot be used within a module.');\n  }\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {?Object=} object The object to embed in the namespace.\n * @param {boolean=} overwriteImplicit If object is set and a previous call\n *     implicitly constructed the namespace given by name, this parameter\n *     controls whether opt_obj should overwrite the implicitly constructed\n *     namespace or be merged into it. Defaults to false.\n * @private\n */\ngoog.constructNamespace_ = function(name, object, overwriteImplicit) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace, goog.LEGACY_NAMESPACE_OBJECT_)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(\n      name, object, overwriteImplicit, goog.LEGACY_NAMESPACE_OBJECT_);\n};\n\n\n/**\n * According to the CSP3 spec a nonce must be a valid base64 string.\n * @see https://www.w3.org/TR/CSP3/#grammardef-base64-value\n * @private @const\n */\ngoog.NONCE_PATTERN_ = /^[\\w+/_-]+[=]{0,2}$/;\n\n\n/**\n * Returns CSP nonce, if set for any script tag.\n * @param {?Window=} opt_window The window context used to retrieve the nonce.\n *     Defaults to global context.\n * @return {string} CSP nonce or empty string if no nonce is present.\n * @private\n */\ngoog.getScriptNonce_ = function(opt_window) {\n  var doc = (opt_window || goog.global).document;\n  var script = doc.querySelector && doc.querySelector('script[nonce]');\n  if (script) {\n    // Try to get the nonce from the IDL property first, because browsers that\n    // implement additional nonce protection features (currently only Chrome) to\n    // prevent nonce stealing via CSS do not expose the nonce via attributes.\n    // See https://github.com/whatwg/html/issues/2369\n    var nonce = script['nonce'] || script.getAttribute('nonce');\n    if (nonce && goog.NONCE_PATTERN_.test(nonce)) {\n      return nonce;\n    }\n  }\n  return '';\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n * MOE:begin_intracomment_strip\n * See the goog.module announcement at http://go/goog.module-announce\n * MOE:end_intracomment_strip\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n * @return {void}\n */\ngoog.module = function(name) {\n  if (typeof name !== 'string' || !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw new Error('Invalid module identifier');\n  }\n  if (!goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        'Module ' + name + ' has been loaded incorrectly. Note, ' +\n        'modules cannot be loaded as normal scripts. They require some kind of ' +\n        'pre-processing step. You\\'re likely trying to load a module via a ' +\n        'script tag or as a part of a concatenated bundle without rewriting the ' +\n        'module. For more info see: ' +\n        'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw new Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (name in goog.loadedModules_) {\n      return goog.loadedModules_[name].exports;\n    } else if (!goog.implicitNamespaces_[name]) {\n      var ns = goog.getObjectByName(name, goog.LEGACY_NAMESPACE_OBJECT_);\n      return ns != null ? ns : null;\n    }\n  }\n  return null;\n};\n\n// MOE:begin_strip\n/**\n * Defines dynamic import execution path for uncompiled mode.\n *\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * NOTE: In compiled code, JsCompiler will transpile this function call.\n * DO NOT OPENSOURCE\n */\ngoog.requireDynamic = function(name) {\n  if (!COMPILED) {\n    if (!goog.importHandler_ || !goog.uncompiledChunkIdHandler_) {\n      throw new Error('Need to setup import handler and chunk id handler.');\n    }\n    return goog.importHandler_(goog.uncompiledChunkIdHandler_(name))\n        .then(function() {\n          var module = goog.module.getInternal_(name);\n          if (module == null) {\n            throw new Error('Module ' + name + ' is not loaded.');\n          }\n          return module;\n        });\n  }\n  return null;\n};\n\n\n/**\n * Handler for dynamic import.\n * DO NOT OPENSOURCE\n */\ngoog.importHandler_ = null;\n\n\n/**\n * Chunk ID calculator.\n * @private {?function(string)}\n * DO NOT OPENSOURCE\n */\ngoog.uncompiledChunkIdHandler_ = null;\n\n\n/**\n * Sets import handler.\n * @param {function(string)} fn\n * DO NOT OPENSOURCE\n */\ngoog.setImportHandlerInternalDoNotCallOrElse = function(fn) {\n  goog.importHandler_ = fn;\n};\n\n\n/**\n * Sets chunk ID calculator.\n * @param {function(string)} fn\n * NOTE: The chunk ID calculator is only used in uncompiled mode.\n * DO NOT OPENSOURCE\n */\ngoog.setUncompiledChunkIdHandlerInternalDoNotCallOrElse = function(fn) {\n  goog.uncompiledChunkIdHandler_ = fn;\n};\n\n\n/**\n * This exists purely as a hint to JsTrimmer, so that it can convert it to\n * goog.require in certain circumstances.\n *\n * @param {string} namespace\n * DO NOT OPENSOURCE\n */\ngoog.maybeRequireFrameworkInternalOnlyDoNotCallOrElse = function(namespace) {};\n// MOE:end_strip\n\n/**\n * Types of modules the debug loader can load.\n * @enum {string}\n */\ngoog.ModuleType = {\n  ES6: 'es6',\n  GOOG: 'goog'\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareLegacyNamespace:boolean,\n *   type: ?goog.ModuleType\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module or an es6 module is currently being\n *     initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();\n};\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInGoogModuleLoader_ = function() {\n  return !!goog.moduleLoaderState_ &&\n      goog.moduleLoaderState_.type == goog.ModuleType.GOOG;\n};\n\n\n/**\n * @private\n * @return {boolean} Whether an es6 module is currently being initialized.\n */\ngoog.isInEs6ModuleLoader_ = function() {\n  var inLoader = !!goog.moduleLoaderState_ &&\n      goog.moduleLoaderState_.type == goog.ModuleType.ES6;\n\n  if (inLoader) {\n    return true;\n  }\n\n  var jscomp = goog.LEGACY_NAMESPACE_OBJECT_['$jscomp'];\n\n  if (jscomp) {\n    // jscomp may not have getCurrentModulePath if this is a compiled bundle\n    // that has some of the runtime, but not all of it. This can happen if\n    // optimizations are turned on so the unused runtime is removed but renaming\n    // and Closure pass are off (so $jscomp is still named $jscomp and the\n    // goog.provide/require calls still exist).\n    if (typeof jscomp.getCurrentModulePath != 'function') {\n      return false;\n    }\n\n    // Bundled ES6 module.\n    return !!jscomp.getCurrentModulePath();\n  }\n\n  return false;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        'goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw new Error(\n        'goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Associates an ES6 module with a Closure module ID so that is available via\n * goog.require. The associated ID  acts like a goog.module ID - it does not\n * create any global names, it is merely available via goog.require /\n * goog.module.get / goog.forwardDeclare / goog.requireType. goog.require and\n * goog.module.get will return the entire module as if it was import *'d. This\n * allows Closure files to reference ES6 modules for the sake of migration.\n *\n * @param {string} namespace\n * @suppress {missingProvide}\n */\ngoog.declareModuleId = function(namespace) {\n  if (!COMPILED) {\n    if (!goog.isInEs6ModuleLoader_()) {\n      throw new Error(\n          'goog.declareModuleId may only be called from ' +\n          'within an ES6 module');\n    }\n    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName) {\n      throw new Error(\n          'goog.declareModuleId may only be called once per module.');\n    }\n    if (namespace in goog.loadedModules_) {\n      throw new Error(\n          'Module with namespace \"' + namespace + '\" already exists.');\n    }\n  }\n  if (goog.moduleLoaderState_) {\n    // Not bundled - debug loading.\n    goog.moduleLoaderState_.moduleName = namespace;\n  } else {\n    // Bundled - not debug loading, no module loader state.\n    var jscomp = goog.LEGACY_NAMESPACE_OBJECT_['$jscomp'];\n    if (!jscomp || typeof jscomp.getCurrentModulePath != 'function') {\n      throw new Error(\n          'Module with namespace \"' + namespace +\n          '\" has been loaded incorrectly.');\n    }\n    var exports = jscomp.require(jscomp.getCurrentModulePath());\n    goog.loadedModules_[namespace] = {\n      exports: exports,\n      type: goog.ModuleType.ES6,\n      moduleId: namespace\n    };\n  }\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw new Error(\n        'Importing test-only code into non-debug environment' +\n        (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n * Before using goog.forwardDeclare, please read the documentation at\n * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\n * understand the options and tradeoffs when working with forward declarations.\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n * @deprecated See go/noforwarddeclaration, Use `goog.requireType` instead.\n */\ngoog.forwardDeclare = function(name) {};\n\nif (!COMPILED) {\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n         goog.getObjectByName(name, goog.LEGACY_NAMESPACE_OBJECT_) != null);\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisfies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var i = 0; i < parts.length; i++) {\n    cur = cur[parts[i]];\n    if (cur == null) {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating\n *     how the file must be loaded.  The boolean 'true' is equivalent\n *     to {'module': 'goog'} for backwards-compatibility.  Valid properties\n *     and values include {'module': 'goog'} and {'lang': 'es6'}.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_loadFlags) {\n  if (!COMPILED && goog.DEPENDENCIES_ENABLED) {\n    goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);\n  }\n};\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n//\n// User-defined namespaces may need their own deps file. For a reference on\n// creating a deps file, see:\n// MOE:begin_strip\n// Internally: http://go/deps-files and http://go/be#js_deps\n// MOE:end_strip\n// Externally: https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work was done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.ENABLE_DEBUG_LOADER = goog.define('goog.ENABLE_DEBUG_LOADER', false);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system.\n *\n * Note that all calls to goog.require will be stripped by the compiler.\n *\n * @see goog.provide\n * @param {string} namespace Namespace (as was given in goog.provide,\n *     goog.module, or goog.declareModuleId) in the form\n *     \"goog.package.part\".\n * @return {?} If called within a goog.module or ES6 module file, the associated\n *     namespace or module otherwise null.\n */\ngoog.require = function(namespace) {\n  if (!COMPILED) {\n    // Might need to lazy load on old IE.\n    if (goog.ENABLE_DEBUG_LOADER) {\n      goog.debugLoader_.requested(namespace);\n    }\n\n    // If the object already exists we do not need to do anything.\n    if (goog.isProvided_(namespace)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(namespace);\n      }\n    } else if (goog.ENABLE_DEBUG_LOADER) {\n      var moduleLoaderState = goog.moduleLoaderState_;\n      goog.moduleLoaderState_ = null;\n      try {\n        goog.debugLoader_.load_(namespace);\n      } finally {\n        goog.moduleLoaderState_ = moduleLoaderState;\n      }\n    }\n\n    return null;\n  }\n};\n\n\n/**\n * Requires a symbol for its type information. This is an indication to the\n * compiler that the symbol may appear in type annotations, yet it is not\n * referenced at runtime.\n *\n * When called within a goog.module or ES6 module file, the return value may be\n * assigned to or destructured into a variable, but it may not be otherwise used\n * in code outside of a type annotation.\n *\n * Note that all calls to goog.requireType will be stripped by the compiler.\n *\n * @param {string} namespace Namespace (as was given in goog.provide,\n *     goog.module, or goog.declareModuleId) in the form\n *     \"goog.package.part\".\n * @return {?}\n */\ngoog.requireType = function(namespace) {\n  // Return an empty object so that single-level destructuring of the return\n  // value doesn't crash at runtime when using the debug loader. Multi-level\n  // destructuring isn't supported.\n  return {};\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The first parameter the script source, which is a relative URI. The second,\n * optional parameter is the script contents, in the event the script needed\n * transformation. It should return true if the script was imported, false\n * otherwise.\n * @type {(function(string, string=): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n * @deprecated Use \"@abstract\" annotation instead of goog.abstractMethod in new\n *     code. See\n *     https://github.com/google/closure-compiler/wiki/@abstract-classes-and-methods\n */\ngoog.abstractMethod = function() {\n  throw new Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a `getInstance` static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n * @suppress {missingProperties} 'instance_' isn't a property on 'Function'\n *     but we don't have a better type to use here.\n */\ngoog.addSingletonGetter = function(ctor) {\n  // instance_ is immediately set to prevent issues with sealed constructors\n  // such as are encountered when a constructor is returned as the export object\n  // of a goog.module in unoptimized code.\n  // Declare type to avoid conformance violations that ctor.instance_ is unknown\n  /** @type {undefined|!Object} @suppress {underscore} */\n  ctor.instance_ = undefined;\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    // Cast to avoid conformance violations that ctor.instance_ is unknown\n    return /** @type {!Object|undefined} */ (ctor.instance_) = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the `goog.testing.singleton` module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using `eval` when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of `eval` is banned\n * so we provide an alternative.\n */\ngoog.LOAD_MODULE_USING_EVAL = goog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.SEAL_MODULE_EXPORTS = goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * The module identifier or path to module exports map.\n * @private @const {!Object<string, {exports:?,type:string,moduleId:string}>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if the debug loader enabled and used.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\n\n\n/**\n * @define {boolean} If true assume that ES modules have already been\n * transpiled by the jscompiler (in the same way that transpile.js would\n * transpile them - to jscomp modules). Useful only for servers that wish to use\n * the debug loader and transpile server side. Thus this is only respected if\n * goog.TRANSPILE is \"never\".\n */\ngoog.ASSUME_ES_MODULES_TRANSPILED =\n    goog.define('goog.ASSUME_ES_MODULES_TRANSPILED', false);\n\n\n/**\n * @define {string} Trusted Types policy name. If non-empty then Closure will\n * use Trusted Types.\n */\ngoog.TRUSTED_TYPES_POLICY_NAME =\n    goog.define('goog.TRUSTED_TYPES_POLICY_NAME', 'goog');\n\n\n/**\n * @package {?boolean}\n * Visible for testing.\n */\ngoog.hasBadLetScoping = null;\n\n\n/**\n * @param {function(?):?|string} moduleDef The module definition.\n */\ngoog.loadModule = function(moduleDef) {\n  // NOTE: we allow function definitions to be either in the from\n  // of a string to eval (which keeps the original source intact) or\n  // in a eval forbidden environment (CSP) we allow a function definition\n  // which in its body must call `goog.module`, and return the exports\n  // of the module.\n  var previousState = goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ = {\n      moduleName: '',\n      declareLegacyNamespace: false,\n      type: goog.ModuleType.GOOG\n    };\n    var origExports = {};\n    var exports = origExports;\n    if (typeof moduleDef === 'function') {\n      exports = moduleDef.call(undefined, exports);\n    } else if (typeof moduleDef === 'string') {\n      exports = goog.loadModuleFromSource_.call(undefined, exports, moduleDef);\n    } else {\n      throw new Error('Invalid module definition');\n    }\n\n    var moduleName = goog.moduleLoaderState_.moduleName;\n    if (typeof moduleName === 'string' && moduleName) {\n      // Don't seal legacy namespaces as they may be used as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        // Whether exports was overwritten via default export assignment.\n        // This is important for legacy namespaces as it dictates whether\n        // previously a previously loaded implicit namespace should be clobbered\n        // or not.\n        var isDefaultExport = origExports !== exports;\n        goog.constructNamespace_(moduleName, exports, isDefaultExport);\n      } else if (\n          goog.SEAL_MODULE_EXPORTS && Object.seal &&\n          typeof exports == 'object' && exports != null) {\n        Object.seal(exports);\n      }\n\n      var data = {\n        exports: exports,\n        type: goog.ModuleType.GOOG,\n        moduleId: goog.moduleLoaderState_.moduleName\n      };\n      goog.loadedModules_[moduleName] = data;\n    } else {\n      throw new Error('Invalid module name \\\"' + moduleName + '\\\"');\n    }\n  } finally {\n    goog.moduleLoaderState_ = previousState;\n  }\n};\n\n\n/**\n * @private @const\n */\ngoog.loadModuleFromSource_ =\n    /** @type {function(!Object, string):?} */ (function(exports) {\n      // NOTE: we avoid declaring parameters or local variables here to avoid\n      // masking globals or leaking values into the module definition.\n      'use strict';\n      eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(arguments[1]));\n      return exports;\n    });\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (\n        i && components[i] == '..' && components[i - 1] &&\n        components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Provides a hook for loading a file when using Closure's goog.require() API\n * with goog.modules.  In particular this hook is provided to support Node.js.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_LOAD_FILE_SYNC;\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {?string} File contents, or null if load failed.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    try {\n      /** @type {XMLHttpRequest} */\n      var xhr = new goog.global['XMLHttpRequest']();\n      xhr.open('get', src, false);\n      xhr.send();\n      // NOTE: Successful http: requests have a status of 200, but successful\n      // file: requests may have a status of zero.  Any other status, or a\n      // thrown exception (particularly in case of file: requests) indicates\n      // some sort of error, which we treat as a missing or unavailable file.\n      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;\n    } catch (err) {\n      // No need to rethrow or log, since errors should show up on their own.\n      return null;\n    }\n  }\n};\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {?} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n\n  if (s != 'object') {\n    return s;\n  }\n\n  if (!value) {\n    return 'null';\n  }\n\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. Note that for this function neither strings nor functions are\n * considered \"array-like\".\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into `getUid`. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n  return Object.prototype.hasOwnProperty.call(obj, goog.UID_PROPERTY_) &&\n      obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using `goog.getUid` in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if (obj !== null && 'removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (typeof obj.clone === 'function') {\n      return obj.clone();\n    }\n    if (typeof Map !== 'undefined' && obj instanceof Map) {\n      return new Map(obj);\n    } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n      return new Set(obj);\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n * @deprecated use `=> {}` or Function.prototype.bind instead.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like goog.bind(), except that a 'this object' is not required. Useful when\n * the target function is already bound.\n *\n * Usage:\n * var g = goog.partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(/** @type {?} */ (this), newArgs);\n  };\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n * @deprecated Use Date.now\n */\ngoog.now = function() {\n  return Date.now();\n};\n\n\n/**\n * Evals JavaScript in the global scope.\n *\n * Throws an exception if neither execScript or eval is defined.\n * @param {string|!TrustedScript} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  (0, eval)(script);\n};\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n\n/**\n * A hook for modifying the default behavior goog.getCssName. The function\n * if present, will receive the standard output of the goog.getCssName as\n * its input.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAP_FN;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x = 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  // String() is used for compatibility with compiled soy where the passed\n  // className can be non-string objects.\n  if (String(className).charAt(0) == '.') {\n    throw new Error(\n        'className passed in goog.getCssName must not start with \".\".' +\n        ' You passed: ' + className);\n  }\n\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename =\n        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  var result =\n      opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);\n\n  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further\n  // processing of the class name.\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\n  }\n\n  return result;\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --process_closure_primitives flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n/**\n * Options bag type for `goog.getMsg()` third argument.\n *\n * It is important to note that these options need to be known at compile time,\n * so they must always be provided to `goog.getMsg()` as an actual object\n * literal in the function call. Otherwise, closure-compiler will report an\n * error.\n * @record\n */\ngoog.GetMsgOptions = function() {};\n\n/**\n * If `true`, escape '<' in the message string to '&lt;'.\n *\n * Used by Closure Templates where the generated code size and performance is\n * critical which is why {@link goog.html.SafeHtmlFormatter} is not used.\n * The value must be literal `true` or `false`.\n * @type {boolean|undefined}\n */\ngoog.GetMsgOptions.prototype.html;\n\n/**\n * If `true`, unescape common html entities: &gt;, &lt;, &apos;, &quot; and\n * &amp;.\n *\n * Used for messages not in HTML context, such as with the `textContent`\n * property.\n * The value must be literal `true` or `false`.\n * @type {boolean|undefined}\n */\ngoog.GetMsgOptions.prototype.unescapeHtmlEntities;\n\n/**\n * Associates placeholder names with strings showing how their values are\n * obtained.\n *\n * This field is intended for use in automatically generated JS code.\n * Human-written code should use meaningful placeholder names instead.\n *\n * closure-compiler uses this as the contents of the `<ph>` tag in the\n * XMB file it generates or defaults to `-` for historical reasons.\n *\n * Must be an object literal.\n * Ignored at runtime.\n * Keys are placeholder names.\n * Values are string literals indicating how the value is obtained.\n * Typically this is a snippet of source code.\n * @type {!Object<string, string>|undefined}\n */\ngoog.GetMsgOptions.prototype.original_code;\n\n/**\n * Associates placeholder names with example values.\n *\n * closure-compiler uses this as the contents of the `<ex>` tag in the\n * XMB file it generates or defaults to `-` for historical reasons.\n *\n * Must be an object literal.\n * Ignored at runtime.\n * Keys are placeholder names.\n * Values are string literals containing example placeholder values.\n * (e.g. \"George McFly\" for a name placeholder)\n * @type {!Object<string, string>|undefined}\n */\ngoog.GetMsgOptions.prototype.example;\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * This function produces a string which should be treated as plain text. Use\n * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to\n * produce SafeHtml.\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {!Object<string, string>=} opt_values Maps place holder name to value.\n * @param {!goog.GetMsgOptions=} opt_options see `goog.GetMsgOptions`\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values, opt_options) {\n  if (opt_options && opt_options.html) {\n    // Note that '&' is not replaced because the translation can contain HTML\n    // entities.\n    str = str.replace(/</g, '&lt;');\n  }\n  if (opt_options && opt_options.unescapeHtmlEntities) {\n    // Note that \"&amp;\" must be the last to avoid \"creating\" new entities.\n    str = str.replace(/&lt;/g, '<')\n              .replace(/&gt;/g, '>')\n              .replace(/&apos;/g, '\\'')\n              .replace(/&quot;/g, '\"')\n              .replace(/&amp;/g, '&');\n  }\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] :\n                                                         match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {?Object=} objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, objectToExportTo) {\n  goog.exportPath_(\n      publicPath, object, /* overwriteImplicit= */ true, objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {!Function} childCtor Child class.\n * @param {!Function} parentCtor Parent class.\n * @suppress {strictMissingProperties} superClass_ and base is not defined on\n *    Function.\n * @deprecated Use ECMAScript class syntax instead.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {}\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n * MOE:begin_intracomment_strip\n * See the goog.scope document at http://go/goog.scope\n *\n * For more on goog.scope deprecation, see the style guide entry:\n * http://go/jsstyle#appendices-legacy-exceptions-goog-scope\n * MOE:end_intracomment_strip\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n * @deprecated Use goog.module instead.\n */\ngoog.scope = function(fn) {\n  if (goog.isInModuleLoader_()) {\n    throw new Error('goog.scope is not supported within a module.');\n  }\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.LEGACY_NAMESPACE_OBJECT_['COMPILED'] = COMPILED;\n}\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n * @deprecated Use ECMAScript class syntax instead.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw new Error(\n          'cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {{\n *   constructor: (!Function|undefined),\n *   statics: (Object|undefined|function(Function):void)\n * }}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by goog.defineClass should\n *     be sealed when possible.\n *\n * When sealing is disabled the constructor function will not be wrapped by\n * goog.defineClass, making it incompatible with ES6 class methods.\n */\ngoog.defineClass.SEAL_CLASS_INSTANCES =\n    goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    // Do now wrap the constructor when sealing is disabled. Angular code\n    // depends on this for injection to work properly.\n    return ctr;\n  }\n\n  // NOTE: The sealing behavior has been removed\n\n  /**\n   * @this {Object}\n   * @return {?}\n   */\n  var wrappedCtr = function() {\n    // Don't seal an instance of a subclass when it calls the constructor of\n    // its super class as there is most likely still setup to do.\n    var instance = ctr.apply(this, arguments) || this;\n    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n\n    return instance;\n  };\n\n  return wrappedCtr;\n};\n\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n  'toLocaleString', 'toString', 'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n/**\n * Returns the parameter.\n * @param {string} s\n * @return {string}\n * @private\n */\ngoog.identity_ = function(s) {\n  return s;\n};\n\n\n/**\n * Creates Trusted Types policy if Trusted Types are supported by the browser.\n * The policy just blesses any string as a Trusted Type. It is not visibility\n * restricted because anyone can also call trustedTypes.createPolicy directly.\n * However, the allowed names should be restricted by a HTTP header and the\n * reference to the created policy should be visibility restricted.\n * @param {string} name\n * @return {?TrustedTypePolicy}\n */\ngoog.createTrustedTypesPolicy = function(name) {\n  var policy = null;\n  var policyFactory = goog.global.trustedTypes;\n  if (!policyFactory || !policyFactory.createPolicy) {\n    return policy;\n  }\n  // trustedTypes.createPolicy throws if called with a name that is already\n  // registered, even in report-only mode. Until the API changes, catch the\n  // error not to break the applications functionally. In such case, the code\n  // will fall back to using regular Safe Types.\n  // TODO(koto): Remove catching once createPolicy API stops throwing.\n  try {\n    policy = policyFactory.createPolicy(name, {\n      createHTML: goog.identity_,\n      createScript: goog.identity_,\n      createScriptURL: goog.identity_\n    });\n  } catch (e) {\n    goog.logToConsole_(e.message);\n  }\n  return policy;\n};\n\n// There's a bug in the compiler where without collapse properties the\n// Closure namespace defines do not guard code correctly. To help reduce code\n// size also check for !COMPILED even though it redundant until this is fixed.\nif (!COMPILED && goog.DEPENDENCIES_ENABLED) {\n  // MOE:begin_strip\n  // TODO(b/67050526) This object is obsolete but some people are relying on\n  // it internally. Keep it around until we migrate them.\n  /**\n   * @private\n   * @type {{\n   *   loadFlags: !Object<string, !Object<string, string>>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    loadFlags: {},  // 1 to 1\n\n    nameToPath: {},  // 1 to 1\n\n    requires: {},  // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file\n    // twice.\n    visited: {},\n\n    written: {},  // Used to keep track of script files we have written.\n\n    deferred: {}  // Used to track deferred module evaluations in old IEs\n  };\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  goog.getLoader_ = function() {\n    return {\n      dependencies_: goog.dependencies_,\n      writeScriptTag_: goog.writeScriptTag_\n    };\n  };\n\n\n  /**\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      /** @type {!HTMLDocument} */\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var nonceAttr = '';\n      var nonce = goog.getScriptNonce_();\n      if (nonce) {\n        nonceAttr = ' nonce=\"' + nonce + '\"';\n      }\n\n      if (opt_sourceText === undefined) {\n        var script = '<script src=\"' + src + '\"' + nonceAttr + '></' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      } else {\n        var script = '<script' + nonceAttr + '>' +\n            goog.protectScriptTag_(opt_sourceText) + '</' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  // MOE:end_strip\n\n\n  /**\n   * Tries to detect whether the current browser is Edge, based on the user\n   * agent. This matches only pre-Chromium Edge.\n   * @see https://docs.microsoft.com/en-us/microsoft-edge/web-platform/user-agent-string\n   * @return {boolean} True if the current browser is Edge.\n   * @private\n   */\n  goog.isEdge_ = function() {\n    var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?\n        goog.global.navigator.userAgent :\n        '';\n    var edgeRe = /Edge\\/(\\d+)(\\.\\d)*/i;\n    return !!userAgent.match(edgeRe);\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    /** @type {!Document} */\n    var doc = goog.global.document;\n    return doc != null && 'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * We'd like to check for if the document readyState is 'loading'; however\n   * there are bugs on IE 10 and below where the readyState being anything other\n   * than 'complete' is not reliable.\n   * @return {boolean}\n   * @private\n   */\n  goog.isDocumentLoading_ = function() {\n    // attachEvent is available on IE 6 thru 10 only, and thus can be used to\n    // detect those browsers.\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n    return doc.attachEvent ? doc.readyState != 'complete' :\n                             doc.readyState == 'loading';\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH != undefined &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        typeof goog.global.CLOSURE_BASE_PATH === 'string') {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    /** @type {!Document} */\n    var doc = goog.global.document;\n    // If we have a currentScript available, use it exclusively.\n    var currentScript = doc.currentScript;\n    if (currentScript) {\n      var scripts = [currentScript];\n    } else {\n      var scripts = doc.getElementsByTagName('SCRIPT');\n    }\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.slice(l - 7, l) == 'base.js') {\n        goog.basePath = src.slice(0, l - 7);\n        return;\n      }\n    }\n  };\n\n  goog.findBasePath_();\n\n  /**\n   * Rewrites closing script tags in input to avoid ending an enclosing script\n   * tag.\n   *\n   * @param {string} str\n   * @return {string}\n   * @private\n   */\n  goog.protectScriptTag_ = function(str) {\n    return str.replace(/<\\/(SCRIPT)/ig, '\\\\x3c/$1');\n  };\n\n\n  /**\n   * A debug loader is responsible for downloading and executing javascript\n   * files in an unbundled, uncompiled environment.\n   *\n   * This can be custimized via the setDependencyFactory method, or by\n   * CLOSURE_IMPORT_SCRIPT/CLOSURE_LOAD_FILE_SYNC.\n   *\n   * @struct @constructor @final @private\n   */\n  goog.DebugLoader_ = function() {\n    /** @private @const {!Object<string, !goog.Dependency>} */\n    this.dependencies_ = {};\n    /** @private @const {!Object<string, string>} */\n    this.idToPath_ = {};\n    /** @private @const {!Object<string, boolean>} */\n    this.written_ = {};\n    /** @private @const {!Array<!goog.Dependency>} */\n    this.loadingDeps_ = [];\n    /** @private {!Array<!goog.Dependency>} */\n    this.depsToLoad_ = [];\n    /** @private {boolean} */\n    this.paused_ = false;\n    /** @private {!goog.DependencyFactory} */\n    this.factory_ = new goog.DependencyFactory();\n    /** @private @const {!Object<string, !Function>} */\n    this.deferredCallbacks_ = {};\n    /** @private @const {!Array<string>} */\n    this.deferredQueue_ = [];\n  };\n\n\n  /**\n   * Loads the Closure deps.js file.\n   *\n   * Exposed a function so after base is loaded, and\n   * then this can be called to load the closure deps.js file.\n   */\n  goog.DebugLoader_.prototype.loadClosureDeps = function() {\n    // Circumvent addDependency, which would try to transpile deps.js if\n    // transpile is set to always.\n    var relPath = 'deps.js';\n    this.depsToLoad_.push(this.factory_.createDependency(\n        goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {}));\n    this.loadDeps_();\n  };\n\n\n  /**\n   * Notifies the debug loader when a dependency has been requested.\n   *\n   * @param {string} absPathOrId Path of the dependency or goog id.\n   * @param {boolean=} opt_force\n   */\n  goog.DebugLoader_.prototype.requested = function(absPathOrId, opt_force) {\n    var path = this.getPathFromDeps_(absPathOrId);\n    if (path &&\n        (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {\n      var callback = this.deferredCallbacks_[path];\n      if (callback) {\n        delete this.deferredCallbacks_[path];\n        callback();\n      }\n    }\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.DebugLoader_.prototype.setDependencyFactory = function(factory) {\n    this.factory_ = factory;\n  };\n\n\n  /**\n   * Travserses the dependency graph and queues the given dependency, and all of\n   * its transitive dependencies, for loading and then starts loading if not\n   * paused.\n   *\n   * @param {string} namespace\n   * @private\n   */\n  goog.DebugLoader_.prototype.load_ = function(namespace) {\n    if (!this.getPathFromDeps_(namespace)) {\n      var errorMessage = 'goog.require could not find: ' + namespace;\n      goog.logToConsole_(errorMessage);\n    } else {\n      var loader = this;\n\n      var deps = [];\n\n      /** @param {string} namespace */\n      var visit = function(namespace) {\n        var path = loader.getPathFromDeps_(namespace);\n\n        if (!path) {\n          throw new Error('Bad dependency path or symbol: ' + namespace);\n        }\n\n        if (loader.written_[path]) {\n          return;\n        }\n\n        loader.written_[path] = true;\n\n        var dep = loader.dependencies_[path];\n        // MOE:begin_strip\n        if (goog.dependencies_.written[dep.relativePath]) {\n          return;\n        }\n        // MOE:end_strip\n        for (var i = 0; i < dep.requires.length; i++) {\n          if (!goog.isProvided_(dep.requires[i])) {\n            visit(dep.requires[i]);\n          }\n        }\n\n        deps.push(dep);\n      };\n\n      visit(namespace);\n\n      var wasLoading = !!this.depsToLoad_.length;\n      this.depsToLoad_ = this.depsToLoad_.concat(deps);\n\n      if (!this.paused_ && !wasLoading) {\n        this.loadDeps_();\n      }\n    }\n  };\n\n\n  /**\n   * Loads any queued dependencies until they are all loaded or paused.\n   *\n   * @private\n   */\n  goog.DebugLoader_.prototype.loadDeps_ = function() {\n    var loader = this;\n    var paused = this.paused_;\n\n    while (this.depsToLoad_.length && !paused) {\n      (function() {\n        var loadCallDone = false;\n        var dep = loader.depsToLoad_.shift();\n\n        var loaded = false;\n        loader.loading_(dep);\n\n        var controller = {\n          pause: function() {\n            if (loadCallDone) {\n              throw new Error('Cannot call pause after the call to load.');\n            } else {\n              paused = true;\n            }\n          },\n          resume: function() {\n            if (loadCallDone) {\n              loader.resume_();\n            } else {\n              // Some dep called pause and then resume in the same load call.\n              // Just keep running this same loop.\n              paused = false;\n            }\n          },\n          loaded: function() {\n            if (loaded) {\n              throw new Error('Double call to loaded.');\n            }\n\n            loaded = true;\n            loader.loaded_(dep);\n          },\n          pending: function() {\n            // Defensive copy.\n            var pending = [];\n            for (var i = 0; i < loader.loadingDeps_.length; i++) {\n              pending.push(loader.loadingDeps_[i]);\n            }\n            return pending;\n          },\n          /**\n           * @param {goog.ModuleType} type\n           */\n          setModuleState: function(type) {\n            goog.moduleLoaderState_ = {\n              type: type,\n              moduleName: '',\n              declareLegacyNamespace: false\n            };\n          },\n          /** @type {function(string, string, string=)} */\n          registerEs6ModuleExports: function(\n              path, exports, opt_closureNamespace) {\n            if (opt_closureNamespace) {\n              goog.loadedModules_[opt_closureNamespace] = {\n                exports: exports,\n                type: goog.ModuleType.ES6,\n                moduleId: opt_closureNamespace || ''\n              };\n            }\n          },\n          /** @type {function(string, ?)} */\n          registerGoogModuleExports: function(moduleId, exports) {\n            goog.loadedModules_[moduleId] = {\n              exports: exports,\n              type: goog.ModuleType.GOOG,\n              moduleId: moduleId\n            };\n          },\n          clearModuleState: function() {\n            goog.moduleLoaderState_ = null;\n          },\n          defer: function(callback) {\n            if (loadCallDone) {\n              throw new Error(\n                  'Cannot register with defer after the call to load.');\n            }\n            loader.defer_(dep, callback);\n          },\n          areDepsLoaded: function() {\n            return loader.areDepsLoaded_(dep.requires);\n          }\n        };\n\n        try {\n          dep.load(controller);\n        } finally {\n          loadCallDone = true;\n        }\n      })();\n    }\n\n    if (paused) {\n      this.pause_();\n    }\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.pause_ = function() {\n    this.paused_ = true;\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.resume_ = function() {\n    if (this.paused_) {\n      this.paused_ = false;\n      this.loadDeps_();\n    }\n  };\n\n\n  /**\n   * Marks the given dependency as loading (load has been called but it has not\n   * yet marked itself as finished). Useful for dependencies that want to know\n   * what else is loading. Example: goog.modules cannot eval if there are\n   * loading dependencies.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loading_ = function(dep) {\n    this.loadingDeps_.push(dep);\n  };\n\n\n  /**\n   * Marks the given dependency as having finished loading and being available\n   * for require.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loaded_ = function(dep) {\n    for (var i = 0; i < this.loadingDeps_.length; i++) {\n      if (this.loadingDeps_[i] == dep) {\n        this.loadingDeps_.splice(i, 1);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.deferredQueue_.length; i++) {\n      if (this.deferredQueue_[i] == dep.path) {\n        this.deferredQueue_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (this.loadingDeps_.length == this.deferredQueue_.length &&\n        !this.depsToLoad_.length) {\n      // Something has asked to load these, but they may not be directly\n      // required again later, so load them now that we know we're done loading\n      // everything else. e.g. a goog module entry point.\n      while (this.deferredQueue_.length) {\n        this.requested(this.deferredQueue_.shift(), true);\n      }\n    }\n\n    dep.loaded();\n  };\n\n\n  /**\n   * @param {!Array<string>} pathsOrIds\n   * @return {boolean}\n   * @private\n   */\n  goog.DebugLoader_.prototype.areDepsLoaded_ = function(pathsOrIds) {\n    for (var i = 0; i < pathsOrIds.length; i++) {\n      var path = this.getPathFromDeps_(pathsOrIds[i]);\n      if (!path ||\n          (!(path in this.deferredCallbacks_) &&\n           !goog.isProvided_(pathsOrIds[i]))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * @param {string} absPathOrId\n   * @return {?string}\n   * @private\n   */\n  goog.DebugLoader_.prototype.getPathFromDeps_ = function(absPathOrId) {\n    if (absPathOrId in this.idToPath_) {\n      return this.idToPath_[absPathOrId];\n    } else if (absPathOrId in this.dependencies_) {\n      return absPathOrId;\n    } else {\n      return null;\n    }\n  };\n\n\n  /**\n   * @param {!goog.Dependency} dependency\n   * @param {!Function} callback\n   * @private\n   */\n  goog.DebugLoader_.prototype.defer_ = function(dependency, callback) {\n    this.deferredCallbacks_[dependency.path] = callback;\n    this.deferredQueue_.push(dependency.path);\n  };\n\n\n  /**\n   * Interface for goog.Dependency implementations to have some control over\n   * loading of dependencies.\n   *\n   * @record\n   */\n  goog.LoadController = function() {};\n\n\n  /**\n   * Tells the controller to halt loading of more dependencies.\n   */\n  goog.LoadController.prototype.pause = function() {};\n\n\n  /**\n   * Tells the controller to resume loading of more dependencies if paused.\n   */\n  goog.LoadController.prototype.resume = function() {};\n\n\n  /**\n   * Tells the controller that this dependency has finished loading.\n   *\n   * This causes this to be removed from pending() and any load callbacks to\n   * fire.\n   */\n  goog.LoadController.prototype.loaded = function() {};\n\n\n  /**\n   * List of dependencies on which load has been called but which have not\n   * called loaded on their controller. This includes the current dependency.\n   *\n   * @return {!Array<!goog.Dependency>}\n   */\n  goog.LoadController.prototype.pending = function() {};\n\n\n  /**\n   * Registers an object as an ES6 module's exports so that goog.modules may\n   * require it by path.\n   *\n   * @param {string} path Full path of the module.\n   * @param {?} exports\n   * @param {string=} opt_closureNamespace Closure namespace to associate with\n   *     this module.\n   */\n  goog.LoadController.prototype.registerEs6ModuleExports = function(\n      path, exports, opt_closureNamespace) {};\n\n\n  /**\n   * Sets the current module state.\n   *\n   * @param {goog.ModuleType} type Type of module.\n   */\n  goog.LoadController.prototype.setModuleState = function(type) {};\n\n\n  /**\n   * Clears the current module state.\n   */\n  goog.LoadController.prototype.clearModuleState = function() {};\n\n\n  /**\n   * Registers a callback to call once the dependency is actually requested\n   * via goog.require + all of the immediate dependencies have been loaded or\n   * all other files have been loaded. Allows for lazy loading until\n   * require'd without pausing dependency loading, which is needed on old IE.\n   *\n   * @param {!Function} callback\n   */\n  goog.LoadController.prototype.defer = function(callback) {};\n\n\n  /**\n   * @return {boolean}\n   */\n  goog.LoadController.prototype.areDepsLoaded = function() {};\n\n\n  /**\n   * Basic super class for all dependencies Closure Library can load.\n   *\n   * This default implementation is designed to load untranspiled, non-module\n   * scripts in a web broswer.\n   *\n   * For goog.modules see {@see goog.GoogModuleDependency}.\n   * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   */\n  goog.Dependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    /** @const */\n    this.path = path;\n    /** @const */\n    this.relativePath = relativePath;\n    /** @const */\n    this.provides = provides;\n    /** @const */\n    this.requires = requires;\n    /** @const */\n    this.loadFlags = loadFlags;\n    /** @private {boolean} */\n    this.loaded_ = false;\n    /** @private {!Array<function()>} */\n    this.loadCallbacks_ = [];\n  };\n\n\n  /**\n   * @return {string} The pathname part of this dependency's path if it is a\n   *     URI.\n   */\n  goog.Dependency.prototype.getPathName = function() {\n    var pathName = this.path;\n    var protocolIndex = pathName.indexOf('://');\n    if (protocolIndex >= 0) {\n      pathName = pathName.substring(protocolIndex + 3);\n      var slashIndex = pathName.indexOf('/');\n      if (slashIndex >= 0) {\n        pathName = pathName.substring(slashIndex + 1);\n      }\n    }\n    return pathName;\n  };\n\n\n  /**\n   * @param {function()} callback Callback to fire as soon as this has loaded.\n   * @final\n   */\n  goog.Dependency.prototype.onLoad = function(callback) {\n    if (this.loaded_) {\n      callback();\n    } else {\n      this.loadCallbacks_.push(callback);\n    }\n  };\n\n\n  /**\n   * Marks this dependency as loaded and fires any callbacks registered with\n   * onLoad.\n   * @final\n   */\n  goog.Dependency.prototype.loaded = function() {\n    this.loaded_ = true;\n    var callbacks = this.loadCallbacks_;\n    this.loadCallbacks_ = [];\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i]();\n    }\n  };\n\n\n  /**\n   * Whether or not document.written / appended script tags should be deferred.\n   *\n   * @private {boolean}\n   */\n  goog.Dependency.defer_ = false;\n\n\n  /**\n   * Map of script ready / state change callbacks. Old IE cannot handle putting\n   * these properties on goog.global.\n   *\n   * @private @const {!Object<string, function(?):undefined>}\n   */\n  goog.Dependency.callbackMap_ = {};\n\n\n  /**\n   * @param {function(...?):?} callback\n   * @return {string}\n   * @private\n   */\n  goog.Dependency.registerCallback_ = function(callback) {\n    var key = Math.random().toString(32);\n    goog.Dependency.callbackMap_[key] = callback;\n    return key;\n  };\n\n\n  /**\n   * @param {string} key\n   * @private\n   */\n  goog.Dependency.unregisterCallback_ = function(key) {\n    delete goog.Dependency.callbackMap_[key];\n  };\n\n\n  /**\n   * @param {string} key\n   * @param {...?} var_args\n   * @private\n   * @suppress {unusedPrivateMembers}\n   */\n  goog.Dependency.callback_ = function(key, var_args) {\n    if (key in goog.Dependency.callbackMap_) {\n      var callback = goog.Dependency.callbackMap_[key];\n      var args = [];\n      for (var i = 1; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n      callback.apply(undefined, args);\n    } else {\n      var errorMessage = 'Callback key ' + key +\n          ' does not exist (was base.js loaded more than once?).';\n      // MOE:begin_strip\n      // TODO(johnplaisted): Some people internally are mistakenly loading\n      // base.js twice, and this can happen while a dependency is loading,\n      // wiping out state.\n      goog.logToConsole_(errorMessage);\n      // MOE:end_strip\n      // MOE:insert throw Error(errorMessage);\n    }\n  };\n\n\n  /**\n   * Starts loading this dependency. This dependency can pause loading if it\n   * needs to and resume it later via the controller interface.\n   *\n   * When this is loaded it should call controller.loaded(). Note that this will\n   * end up calling the loaded method of this dependency; there is no need to\n   * call it explicitly.\n   *\n   * @param {!goog.LoadController} controller\n   */\n  goog.Dependency.prototype.load = function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          'Cannot use default debug loader outside of HTML documents.');\n      if (this.relativePath == 'deps.js') {\n        // CLOSURE_IMPORT_SCRIPT should be set *before* base.js is loaded.\n        goog.logToConsole_(\n            'Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js.');\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n\n    // If the user tries to require a new symbol after document load,\n    // something has gone terribly wrong. Doing a document.write would\n    // wipe out the page. This does not apply to the CSP-compliant method\n    // of writing script tags.\n    if (doc.readyState == 'complete' &&\n        !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n      // Certain test frameworks load base.js multiple times, which tries\n      // to write deps.js each time. If that happens, just fail silently.\n      // These frameworks wipe the page between each load of base.js, so this\n      // is OK.\n      var isDeps = /\\bdeps.js$/.test(this.path);\n      if (isDeps) {\n        controller.loaded();\n        return;\n      } else {\n        throw Error('Cannot write \"' + this.path + '\" after document load');\n      }\n    }\n\n    var nonce = goog.getScriptNonce_();\n    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n        goog.isDocumentLoading_()) {\n      var key;\n      var callback = function(script) {\n        if (script.readyState && script.readyState != 'complete') {\n          script.onload = callback;\n          return;\n        }\n        goog.Dependency.unregisterCallback_(key);\n        controller.loaded();\n      };\n      key = goog.Dependency.registerCallback_(callback);\n\n      var defer = goog.Dependency.defer_ ? ' defer' : '';\n      var nonceAttr = nonce ? ' nonce=\"' + nonce + '\"' : '';\n      var script = '<script src=\"' + this.path + '\"' + nonceAttr + defer +\n          ' id=\"script-' + key + '\"><\\/script>';\n\n      script += '<script' + nonceAttr + '>';\n\n      if (goog.Dependency.defer_) {\n        script += 'document.getElementById(\\'script-' + key +\n            '\\').onload = function() {\\n' +\n            '  goog.Dependency.callback_(\\'' + key + '\\', this);\\n' +\n            '};\\n';\n      } else {\n        script += 'goog.Dependency.callback_(\\'' + key +\n            '\\', document.getElementById(\\'script-' + key + '\\'));';\n      }\n\n      script += '<\\/script>';\n\n      doc.write(\n          goog.TRUSTED_TYPES_POLICY_ ?\n              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n              script);\n    } else {\n      var scriptEl =\n          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));\n      scriptEl.defer = goog.Dependency.defer_;\n      scriptEl.async = false;\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n      if (nonce) {\n        scriptEl.nonce = nonce;\n      }\n\n      scriptEl.onload = function() {\n        scriptEl.onload = null;\n        controller.loaded();\n      };\n\n      scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?\n          goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) :\n          this.path;\n      doc.head.appendChild(scriptEl);\n    }\n  };\n\n\n  /**\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides Should be an empty array.\n   *     TODO(johnplaisted) add support for adding closure namespaces to ES6\n   *     modules for interop purposes.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   * @extends {goog.Dependency}\n   */\n  goog.Es6ModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.Es6ModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(goog.Es6ModuleDependency, goog.Dependency);\n\n\n  /**\n   * @override\n   * @param {!goog.LoadController} controller\n   */\n  goog.Es6ModuleDependency.prototype.load = function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          'Cannot use default debug loader outside of HTML documents.');\n      controller.pause();\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n\n    var dep = this;\n\n    // TODO(johnplaisted): Does document.writing really speed up anything? Any\n    // difference between this and just waiting for interactive mode and then\n    // appending?\n    function write(src, contents) {\n      var nonceAttr = '';\n      var nonce = goog.getScriptNonce_();\n      if (nonce) {\n        nonceAttr = ' nonce=\"' + nonce + '\"';\n      }\n\n      if (contents) {\n        var script = '<script type=\"module\" crossorigin' + nonceAttr + '>' +\n            contents + '</' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      } else {\n        var script = '<script type=\"module\" crossorigin src=\"' + src + '\"' +\n            nonceAttr + '></' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      }\n    }\n\n    function append(src, contents) {\n      var scriptEl =\n          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));\n      scriptEl.defer = true;\n      scriptEl.async = false;\n      scriptEl.type = 'module';\n      scriptEl.setAttribute('crossorigin', true);\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n      var nonce = goog.getScriptNonce_();\n      if (nonce) {\n        scriptEl.nonce = nonce;\n      }\n\n      if (contents) {\n        scriptEl.text = goog.TRUSTED_TYPES_POLICY_ ?\n            goog.TRUSTED_TYPES_POLICY_.createScript(contents) :\n            contents;\n      } else {\n        scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?\n            goog.TRUSTED_TYPES_POLICY_.createScriptURL(src) :\n            src;\n      }\n\n      doc.head.appendChild(scriptEl);\n    }\n\n    var create;\n\n    if (goog.isDocumentLoading_()) {\n      create = write;\n      // We can ONLY call document.write if we are guaranteed that any\n      // non-module script tags document.written after this are deferred.\n      // Small optimization, in theory document.writing is faster.\n      goog.Dependency.defer_ = true;\n    } else {\n      create = append;\n    }\n\n    // Write 4 separate tags here:\n    // 1) Sets the module state at the correct time (just before execution).\n    // 2) A src node for this, which just hopefully lets the browser load it a\n    //    little early (no need to parse #3).\n    // 3) Import the module and register it.\n    // 4) Clear the module state at the correct time. Guaranteed to run even\n    //    if there is an error in the module (#3 will not run if there is an\n    //    error in the module).\n    var beforeKey = goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(beforeKey);\n      controller.setModuleState(goog.ModuleType.ES6);\n    });\n    create(undefined, 'goog.Dependency.callback_(\"' + beforeKey + '\")');\n\n    // TODO(johnplaisted): Does this really speed up anything?\n    create(this.path, undefined);\n\n    var registerKey = goog.Dependency.registerCallback_(function(exports) {\n      goog.Dependency.unregisterCallback_(registerKey);\n      controller.registerEs6ModuleExports(\n          dep.path, exports, goog.moduleLoaderState_.moduleName);\n    });\n    create(\n        undefined,\n        'import * as m from \"' + this.path + '\"; goog.Dependency.callback_(\"' +\n            registerKey + '\", m)');\n\n    var afterKey = goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(afterKey);\n      controller.clearModuleState();\n      controller.loaded();\n    });\n    create(undefined, 'goog.Dependency.callback_(\"' + afterKey + '\")');\n  };\n\n\n  /**\n   * Superclass of any dependency that needs to be loaded into memory,\n   * transformed, and then eval'd (goog.modules and transpiled files).\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor @abstract\n   * @extends {goog.Dependency}\n   */\n  goog.TransformedDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.TransformedDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n    /** @private {?string} */\n    this.contents_ = null;\n\n    /**\n     * Whether to lazily make the synchronous XHR (when goog.require'd) or make\n     * the synchronous XHR when initially loading. On FireFox 61 there is a bug\n     * where an ES6 module cannot make a synchronous XHR (rather, it can, but if\n     * it does then no other ES6 modules will load after).\n     *\n     * tl;dr we lazy load due to bugs on older browsers and eager load due to\n     * bugs on newer ones.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1477090\n     *\n     * @private @const {boolean}\n     */\n    this.lazyFetch_ = !goog.inHtmlDocument_() ||\n        !('noModule' in goog.global.document.createElement('script'));\n  };\n  goog.inherits(goog.TransformedDependency, goog.Dependency);\n\n\n  /**\n   * @override\n   * @param {!goog.LoadController} controller\n   */\n  goog.TransformedDependency.prototype.load = function(controller) {\n    var dep = this;\n\n    function fetch() {\n      dep.contents_ = goog.loadFileSync_(dep.path);\n\n      if (dep.contents_) {\n        dep.contents_ = dep.transform(dep.contents_);\n        if (dep.contents_) {\n          dep.contents_ += '\\n//# sourceURL=' + dep.path;\n        }\n      }\n    }\n\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      fetch();\n      if (this.contents_ &&\n          goog.global.CLOSURE_IMPORT_SCRIPT('', this.contents_)) {\n        this.contents_ = null;\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n\n    var isEs6 = this.loadFlags['module'] == goog.ModuleType.ES6;\n\n    if (!this.lazyFetch_) {\n      fetch();\n    }\n\n    function load() {\n      if (dep.lazyFetch_) {\n        fetch();\n      }\n\n      if (!dep.contents_) {\n        // loadFileSync_ or transform are responsible. Assume they logged an\n        // error.\n        return;\n      }\n\n      if (isEs6) {\n        controller.setModuleState(goog.ModuleType.ES6);\n      }\n\n      var namespace;\n\n      try {\n        var contents = dep.contents_;\n        dep.contents_ = null;\n        goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(contents));\n        if (isEs6) {\n          namespace = goog.moduleLoaderState_.moduleName;\n        }\n      } finally {\n        if (isEs6) {\n          controller.clearModuleState();\n        }\n      }\n\n      if (isEs6) {\n        // Due to circular dependencies this may not be available for require\n        // right now.\n        goog.LEGACY_NAMESPACE_OBJECT_['$jscomp']['require']['ensure'](\n            [dep.getPathName()], function() {\n              controller.registerEs6ModuleExports(\n                  dep.path,\n                  goog.LEGACY_NAMESPACE_OBJECT_['$jscomp']['require'](\n                      dep.getPathName()),\n                  namespace);\n            });\n      }\n\n      controller.loaded();\n    }\n\n    // Do not fetch now; in FireFox 47 the synchronous XHR doesn't block all\n    // events. If we fetched now and then document.write'd the contents the\n    // document.write would be an eval and would execute too soon! Instead write\n    // a script tag to fetch and eval synchronously at the correct time.\n    function fetchInOwnScriptThenLoad() {\n      /** @type {!HTMLDocument} */\n      var doc = goog.global.document;\n\n      var key = goog.Dependency.registerCallback_(function() {\n        goog.Dependency.unregisterCallback_(key);\n        load();\n      });\n\n      var nonce = goog.getScriptNonce_();\n      var nonceAttr = nonce ? ' nonce=\"' + nonce + '\"' : '';\n      var script = '<script' + nonceAttr + '>' +\n          goog.protectScriptTag_('goog.Dependency.callback_(\"' + key + '\");') +\n          '</' +\n          'script>';\n      doc.write(\n          goog.TRUSTED_TYPES_POLICY_ ?\n              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n              script);\n    }\n\n    // If one thing is pending it is this.\n    var anythingElsePending = controller.pending().length > 1;\n\n    // Additionally if we are meant to defer scripts but the page is still\n    // loading (e.g. an ES6 module is loading) then also defer. Or if we are\n    // meant to defer and anything else is pending then defer (those may be\n    // scripts that did not need transformation and are just script tags with\n    // defer set to true, and we need to evaluate after that deferred script).\n    var needsAsyncLoading = goog.Dependency.defer_ &&\n        (anythingElsePending || goog.isDocumentLoading_());\n\n    if (needsAsyncLoading) {\n      // Note that we only defer when we have to rather than 100% of the time.\n      // Always defering would work, but then in theory the order of\n      // goog.require calls would then matter. We want to enforce that most of\n      // the time the order of the require calls does not matter.\n      controller.defer(function() {\n        load();\n      });\n      return;\n    }\n    // TODO(johnplaisted): Externs are missing onreadystatechange for\n    // HTMLDocument.\n    /** @type {?} */\n    var doc = goog.global.document;\n\n    var isInternetExplorerOrEdge = goog.inHtmlDocument_() &&\n        ('ActiveXObject' in goog.global || goog.isEdge_());\n\n    // Don't delay in any version of IE or pre-Chromium Edge. There's a bug\n    // around this that will cause out of order script execution. This means\n    // that on older IE ES6 modules will load too early (while the document is\n    // still loading + the dom is not available). The other option is to load\n    // too late (when the document is complete and the onload even will never\n    // fire). This seems to be the lesser of two evils as scripts already act\n    // like the former.\n    if (isEs6 && goog.inHtmlDocument_() && goog.isDocumentLoading_() &&\n        !isInternetExplorerOrEdge) {\n      goog.Dependency.defer_ = true;\n      // Transpiled ES6 modules still need to load like regular ES6 modules,\n      // aka only after the document is interactive.\n      controller.pause();\n      var oldCallback = doc.onreadystatechange;\n      doc.onreadystatechange = function() {\n        if (doc.readyState == 'interactive') {\n          doc.onreadystatechange = oldCallback;\n          load();\n          controller.resume();\n        }\n        if (typeof oldCallback === 'function') {\n          oldCallback.apply(undefined, arguments);\n        }\n      };\n    } else {\n      // Always eval on old IE.\n      if (!goog.inHtmlDocument_() || !goog.isDocumentLoading_()) {\n        load();\n      } else {\n        fetchInOwnScriptThenLoad();\n      }\n    }\n  };\n\n\n  /**\n   * @param {string} contents\n   * @return {string}\n   * @abstract\n   */\n  goog.TransformedDependency.prototype.transform = function(contents) {};\n\n\n  /**\n   * An ES6 module dependency that was transpiled to a jscomp module outside\n   * of the debug loader, e.g. server side.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.PreTranspiledEs6ModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.PreTranspiledEs6ModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(\n      goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency);\n\n\n  /**\n   * @override\n   * @param {string} contents\n   * @return {string}\n   */\n  goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(\n      contents) {\n    return contents;\n  };\n\n\n  /**\n   * A goog.module, transpiled or not. Will always perform some minimal\n   * transformation even when not transpiled to wrap in a goog.loadModule\n   * statement.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.GoogModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.GoogModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);\n\n\n  /**\n   * @override\n   * @param {string} contents\n   * @return {string}\n   */\n  goog.GoogModuleDependency.prototype.transform = function(contents) {\n    if (!goog.LOAD_MODULE_USING_EVAL || goog.global.JSON === undefined) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' + contents +\n          '\\n' +  // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + this.path + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              contents + '\\n//# sourceURL=' + this.path + '\\n') +\n          ');';\n    }\n  };\n\n\n  /**\n   * @param {string} relPath\n   * @param {!Array<string>|undefined} provides\n   * @param {!Array<string>} requires\n   * @param {boolean|!Object<string>=} opt_loadFlags\n   * @see goog.addDependency\n   */\n  goog.DebugLoader_.prototype.addDependency = function(\n      relPath, provides, requires, opt_loadFlags) {\n    provides = provides || [];\n    relPath = relPath.replace(/\\\\/g, '/');\n    var path = goog.normalizePath_(goog.basePath + relPath);\n    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {\n      opt_loadFlags = opt_loadFlags ? {'module': goog.ModuleType.GOOG} : {};\n    }\n    var dep = this.factory_.createDependency(\n        path, relPath, provides, requires, opt_loadFlags);\n    this.dependencies_[path] = dep;\n    for (var i = 0; i < provides.length; i++) {\n      this.idToPath_[provides[i]] = path;\n    }\n    this.idToPath_[relPath] = path;\n  };\n\n\n  /**\n   * Creates goog.Dependency instances for the debug loader to load.\n   *\n   * Should be overridden to have the debug loader use custom subclasses of\n   * goog.Dependency.\n   *\n   * @struct @constructor\n   */\n  goog.DependencyFactory = function() {};\n\n\n  /**\n   * @param {string} path Absolute path of the file.\n   * @param {string} relativePath Path relative to closure\u2019s base.js.\n   * @param {!Array<string>} provides Array of provided goog.provide/module ids.\n   * @param {!Array<string>} requires Array of required goog.provide/module /\n   *     relative ES6 module paths.\n   * @param {!Object<string, string>} loadFlags\n   * @return {!goog.Dependency}\n   */\n  goog.DependencyFactory.prototype.createDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    // MOE:begin_strip\n    var provide, require;\n    for (var i = 0; provide = provides[i]; i++) {\n      goog.dependencies_.nameToPath[provide] = relativePath;\n      goog.dependencies_.loadFlags[relativePath] = loadFlags;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(relativePath in goog.dependencies_.requires)) {\n        goog.dependencies_.requires[relativePath] = {};\n      }\n      goog.dependencies_.requires[relativePath][require] = true;\n    }\n    // MOE:end_strip\n\n    if (loadFlags['module'] == goog.ModuleType.GOOG) {\n      return new goog.GoogModuleDependency(\n          path, relativePath, provides, requires, loadFlags);\n    } else {\n      if (loadFlags['module'] == goog.ModuleType.ES6) {\n        if (goog.ASSUME_ES_MODULES_TRANSPILED) {\n          return new goog.PreTranspiledEs6ModuleDependency(\n              path, relativePath, provides, requires, loadFlags);\n        } else {\n          return new goog.Es6ModuleDependency(\n              path, relativePath, provides, requires, loadFlags);\n        }\n      } else {\n        return new goog.Dependency(\n            path, relativePath, provides, requires, loadFlags);\n      }\n    }\n  };\n\n\n  /** @private @const */\n  goog.debugLoader_ = new goog.DebugLoader_();\n\n\n  /**\n   * Loads the Closure deps.js file.\n   *\n   * Exposed a public function so after base is loaded, and\n   * then this can be called to load the closure deps.js file.\n   */\n  goog.loadClosureDeps = function() {\n    goog.debugLoader_.loadClosureDeps();\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * Note:\n   * You can call goog.loadClosureDeps to load the Closure dependency file\n   * later, after your factory is injected.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.setDependencyFactory = function(factory) {\n    goog.debugLoader_.setDependencyFactory(factory);\n  };\n\n\n  /**\n   * Trusted Types policy for the debug loader.\n   * @private @const {?TrustedTypePolicy}\n   */\n  goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ?\n      goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + '#base') :\n      null;\n}\n\n\nif (!COMPILED) {\n  var isChrome87 = false;\n  // Cannot run check for Chrome <87 bug in case of strict CSP environments.\n  // TODO(aaronshim): Remove once Chrome <87 bug is no longer a problem.\n  try {\n    isChrome87 = eval(goog.global.trustedTypes.emptyScript) !==\n        goog.global.trustedTypes.emptyScript;\n  } catch (err) {\n  }\n\n  /**\n   * Trusted Types for running dev servers.\n   *\n   * @private @const\n   */\n  goog.CLOSURE_EVAL_PREFILTER_ =\n      // Detect Chrome <87 bug with TT and eval.\n      goog.global.trustedTypes && isChrome87 &&\n          goog.createTrustedTypesPolicy('goog#base#devonly#eval') ||\n      {createScript: goog.identity_};\n}\n","import {Date as GoogDate} from 'google3/third_party/javascript/closure/date/date';\n\n// TODO: b/287589633 - Move these IDs if they are not to be shared.\n/** Analytics API Secret. */\nexport const GA4_API_SECRET = '4Kqze13oQeysgtPTWX6YDA';\n/** Analytics Measurement ID. */\nexport const GA4_MEASUREMENT_ID = 'G-7822LS9WSS';\n\nconst GA_BASE_URL = 'https://www.google-analytics.com';\nconst GA_URL = `${GA_BASE_URL}/mp/collect`;\nconst GA_TEST_URL = `${GA_BASE_URL}/debug/mp/collect`;\n// GA4 wants this param for realtime reports so we provide the default value.\nconst DEFAULT_ENGAGEMENT_TIME_MSEC = 100;\n\n/** Base URL for the Google Arts & Culture website. */\nexport const GAC_SITE_URL = 'https://artsandculture.google.com';\n\nenum UtmParams {\n  SOURCE = 'utm_source',\n  MEDIUM = 'utm_medium',\n  CAMPAIGN = 'utm_campaign',\n}\n\n/** Provides analytics url params. */\nexport function getUtmParams(\n  sourceValue = 'chrome_extension',\n  mediumValue = 'default_link',\n  campaignValue = 'chrome_extension_3',\n): string {\n  return (\n    `${UtmParams.SOURCE}=${sourceValue}&` +\n    `${UtmParams.MEDIUM}=${mediumValue}&` +\n    `${UtmParams.CAMPAIGN}=${campaignValue}`\n  );\n}\n\nasync function getOrCreateClientId(): Promise<string> {\n  const result = await chrome.storage.local.get('clientId');\n  let clientId = result ? result['clientId'] : undefined;\n  if (!clientId) {\n    clientId = self.crypto.randomUUID();\n    await chrome.storage.local.set({'clientId': clientId});\n  }\n  return clientId;\n}\n\n/** The session ID is the current date in an ISO format string. */\nfunction getSessionId(): string {\n  const verbose = false;\n  const includeTz = false;\n  const now = new GoogDate();\n  return now.toIsoString(verbose, includeTz);\n}\n\n/** Test modes for GA4 development, set to PROD for release. */\n// TODO: b/287589633 - Set this value via a config?\nexport enum AnalyticsMode {\n  PROD = 'Production',\n  TEST = 'Debug',\n  VALIDATE = 'Validate',\n}\n\n// When true no HTTP requests are made in tests.\nlet noFetchMode = false;\n\n/** Sends events to GA4. */\n// eventName & params object keys must be 40 characters max, only alpha-numeric\n// or underscores, must start with alpha.\n// params obj values 100 characters max.\nexport async function sendGoogleAnalyticsEvent<T>(\n  eventName: string,\n  params: T,\n  mode = AnalyticsMode.PROD,\n): Promise<void> {\n  // TODO: b/287589633 - Consider if consent attributes need to be added see:\n  // https://developers.google.com/analytics/devguides/collection/protocol/ga4/reference?client_type=gtag#payload_consent\n  const body = {\n    'client_id': await getOrCreateClientId(),\n    'user_properties': {\n      'chrome_extension_version': {\n        'value': chrome.runtime.getManifest().version,\n      },\n      'preferred_user_languages': {\n        'value': (await chrome.i18n.getAcceptLanguages())\n          .join(', ')\n          .substring(0, 100),\n      },\n    },\n    'events': [\n      {\n        'name': eventName,\n        'params': {\n          'session_id': getSessionId(),\n          'engagement_time_msec': DEFAULT_ENGAGEMENT_TIME_MSEC,\n          ...params,\n          ...(mode !== AnalyticsMode.PROD ? {'debug_mode': true} : {}),\n        },\n      },\n    ],\n  };\n\n  const postUrl =\n    (mode === AnalyticsMode.VALIDATE ? GA_TEST_URL : GA_URL) +\n    `?measurement_id=${GA4_MEASUREMENT_ID}&api_secret=${GA4_API_SECRET}`;\n\n  const postData = {\n    method: 'POST',\n    headers: {'Accept': 'application/json'},\n    body: JSON.stringify(body),\n  };\n\n  if (mode !== AnalyticsMode.PROD) {\n    console.info(`POST GA4 event to ${postUrl}`, body);\n  }\n\n  if (noFetchMode) {\n    return;\n  }\n\n  const response = await fetch(postUrl, postData);\n\n  if (!response.ok) {\n    console.error(`GA4 response error ${response.status}`);\n  }\n\n  if (mode === AnalyticsMode.VALIDATE) {\n    const validationResult = await response.json();\n    console.info('GA4 validation result', validationResult);\n  }\n}\n\nexport const TEST_ONLY = {\n  activateNoFetchMode: () => {\n    noFetchMode = true;\n  },\n};\n","import {getUtmParams} from 'google3/cultural/integrations/chromeextensions/shared/analytics/analytics';\n\n/**\n * Format for asset data as contained in the JSON file.\n */\n// tslint:disable:enforce-name-casing JSON format\nexport declare interface AssetData {\n  artist_link: string; // Link for the artist name\n  attribution: string; // The partner name\n  attribution_link: string; // The partner link\n  creator: string; // Name of the artist\n  image: string; // URL of the artwork (without fife suffix)\n  link: string; // URL of the asset in the GAC website\n  source: string; // Source channel of the asset\n  title: string; // Title of the artwork\n  data_url?: string; // Data URL from FileReader once image is downloaded\n}\n// tslint:enable:enforce-name-casing\n\n/** ArtTab asset JSON URL. */\nexport const IMAX_JSON_DATA_URL =\n  'https://www.gstatic.com/culturalinstitute/tabext/imax_2_2.json';\n\nconst GAC_SITE_BASE_URL = 'https://artsandculture.google.com/';\n\n/** Image URL suffix for resolution. */\nconst IMAGE_SIZE_REQUEST = '=s1920-rw';\n\nconst CACHE_OPTIONS = {\n  ignoreMethod: true,\n  ignoreSearch: true,\n  ignoreVary: true,\n};\n\nconst DATA_REQUEST_OPTIONS = {\n  method: 'GET',\n  headers: {'Accept': 'application/json'},\n};\n\nconst IMAGE_REQUEST_OPTIONS = {\n  method: 'GET',\n  headers: {'Accept': 'image/*'},\n};\n\nconst CACHE_NAME = 'gac_chromeextensions';\n\nlet syncedAssetData: readonly AssetData[] = [];\n\n/** Return the number of assets currently synced. */\nexport async function syncedAssetCount(): Promise<number> {\n  if (syncedAssetData.length === 0) {\n    await syncData(IMAX_JSON_DATA_URL);\n  }\n  return syncedAssetData.length;\n}\n\n/** Retrieve the data for a specific asset index. */\nexport async function getAssetData(index: number): Promise<AssetData> {\n  if (!syncedAssetData[index].data_url) {\n    await loadImage(index);\n  }\n  prepareAssetLinks(index);\n  return syncedAssetData[index];\n}\n\nfunction prepareAssetLinks(index: number) {\n  const assetData = syncedAssetData[index];\n  if (assetData.artist_link) {\n    assetData.artist_link = composeLink(assetData.artist_link);\n  }\n  if (assetData.attribution_link) {\n    assetData.attribution_link = composeLink(assetData.attribution_link);\n  }\n  if (assetData.link) {\n    assetData.link = composeLink(assetData.link);\n  }\n}\n\nfunction composeLink(link: string): string {\n  if (!link.startsWith('http')) {\n    return `${GAC_SITE_BASE_URL}${link}?${getUtmParams()}`;\n  }\n  return link;\n}\n\n/**\n * Download and cache asset data from a JSON file URL.\n */\nexport async function syncData(jsonUrl: string): Promise<boolean> {\n  const cache: Cache = await self.caches.open(CACHE_NAME);\n\n  let cachedResponse: Response | undefined = await cache.match(\n    jsonUrl,\n    CACHE_OPTIONS,\n  );\n\n  if (!cachedResponse) {\n    const fetchResponse: Response = await fetch(jsonUrl, DATA_REQUEST_OPTIONS);\n\n    if (!fetchResponse.ok) {\n      console.error(fetchResponse.statusText);\n      return false;\n    }\n\n    cachedResponse = fetchResponse.clone();\n\n    await cache.put(jsonUrl, fetchResponse);\n  }\n\n  syncedAssetData = await cachedResponse.json();\n\n  if (syncedAssetData.length === 0) {\n    console.error('Asset data is empty');\n    return false;\n  }\n\n  return true;\n}\n\nlet loadImageTestMode = false;\n\n/**\n * Download and cache an image, read blob to create a data URL and store it\n * locally.\n */\nexport async function loadImage(imageId: number): Promise<boolean> {\n  if (loadImageTestMode) {\n    return true;\n  }\n\n  if (syncedAssetData.length === 0) {\n    await syncData(IMAX_JSON_DATA_URL);\n  }\n\n  if (imageId < 0 || imageId >= syncedAssetData.length) {\n    console.error(\n      `ImageID ${imageId}/${syncedAssetData.length - 1} is invalid`,\n    );\n    return false;\n  }\n\n  const assetData = syncedAssetData[imageId];\n\n  const imageUrl = `${assetData.image}${IMAGE_SIZE_REQUEST}`;\n\n  const cache: Cache = await self.caches.open(CACHE_NAME);\n\n  let cachedResponse: Response | undefined = await cache.match(\n    imageUrl,\n    CACHE_OPTIONS,\n  );\n\n  if (!cachedResponse) {\n    const fetchResponse: Response = await fetch(\n      imageUrl,\n      IMAGE_REQUEST_OPTIONS,\n    );\n\n    if (!fetchResponse.ok) {\n      console.error(fetchResponse.statusText);\n      return false;\n    }\n\n    cachedResponse = fetchResponse.clone();\n\n    await cache.put(imageUrl, fetchResponse);\n  }\n\n  const dataUrl = await blobToDataUrl(await cachedResponse.blob());\n\n  setDataUrl(imageId, dataUrl);\n\n  return true;\n}\n\nasync function blobToDataUrl(blob: Blob): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result as string);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.onabort = () => {\n      reject(new Error('Read aborted'));\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\nfunction setDataUrl(imageId: number, dataUrl: string) {\n  if (imageId < 0 || imageId >= syncedAssetData.length) {\n    console.error(`ImageID ${imageId} is invalid`);\n    return;\n  }\n  syncedAssetData[imageId].data_url = dataUrl;\n}\n\nexport const TEST_ONLY = {\n  CACHE_OPTIONS,\n  DATA_REQUEST_OPTIONS,\n  IMAGE_REQUEST_OPTIONS,\n  IMAGE_SIZE_REQUEST,\n  GAC_SITE_BASE_URL,\n  CACHE_NAME,\n  getAssetData: () => syncedAssetData,\n  setAssetData: (data: readonly AssetData[]) => {\n    syncedAssetData = data;\n  },\n  resetAssetData: () => {\n    syncedAssetData = [];\n  },\n  activateLoadImageTestMode: () => {\n    loadImageTestMode = true;\n  },\n};\n","import {writeCurrentAssetIndex} from 'google3/cultural/integrations/chromeextensions/arttab/newtab/settings';\nimport {\n  loadImage,\n  syncedAssetCount,\n} from 'google3/cultural/integrations/chromeextensions/shared/assetdata/assetdata';\nimport {ExtMessageType} from 'google3/cultural/integrations/chromeextensions/shared/extmessages/extmessages';\n\nimport type {\n  ExtMessage,\n  ExtResponse,\n  PayloadRotateImage,\n} from 'google3/cultural/integrations/chromeextensions/shared/extmessages/extmessages';\n\n/**\n * Responds to extension messages.\n * Returning true keeps the message channel open for an async response.\n */\nexport function handleRuntimeMessage(\n  message: ExtMessage,\n  sender: chrome.runtime.MessageSender | null,\n  sendResponse: (response: ExtResponse) => void,\n): boolean {\n  switch (message.type) {\n    case ExtMessageType.ROTATE_IMAGE:\n      const payload = message.payload as PayloadRotateImage;\n      handleRotateImage(payload.currentAssetIndex);\n      break;\n    default:\n    // No-op\n  }\n  return false;\n}\n\nasync function handleRotateImage(currentAssetIndex: number): Promise<void> {\n  currentAssetIndex += 1;\n  const totalAssets = await syncedAssetCount();\n\n  if (currentAssetIndex >= totalAssets) {\n    currentAssetIndex = 0;\n  }\n\n  let nextAssetIndex = currentAssetIndex + 1;\n  if (nextAssetIndex >= totalAssets) {\n    nextAssetIndex = 0;\n  }\n\n  const result = await loadImage(nextAssetIndex);\n\n  if (result) {\n    await writeCurrentAssetIndex(currentAssetIndex);\n    await chrome.runtime.sendMessage({\n      type: ExtMessageType.UPDATE_ASSET,\n    } as ExtMessage);\n  }\n}\n","/** Message types for GAC chrome extensions. */\nexport enum ExtMessageType {\n  /** Temporary message to test communication. */\n  ROTATE_IMAGE = 'rotateImage',\n  UPDATE_ASSET = 'updateAsset',\n  USER_SETTINGS_UPDATE = 'userSettingsUpdate',\n}\n\n/** Message format for GAC chrome extensions. */\nexport declare interface ExtMessage {\n  type: ExtMessageType;\n  message?: string;\n  payload?: object;\n}\n\n/** Payload format for ExtMessageType.ROTATE_IMAGE. */\nexport declare interface PayloadRotateImage {\n  currentAssetIndex: number;\n}\n\n/** Payload format for ExtMessageType.USER_SETTINGS_UPDATE. */\nexport declare interface PayloadUserSettingsUpdate {\n  key: string;\n  value: boolean;\n}\n\n/** Message response format for GAC chrome extensions. */\nexport declare interface ExtResponse {\n  success: boolean;\n  errorMessage?: string;\n}\n","import {handleOnInstalled} from './extensionInstall';\nimport {handleActionClicked} from './handleActions';\nimport {handleRuntimeMessage} from './handleMessages';\n\nchrome.runtime.onInstalled.addListener(handleOnInstalled);\n\nchrome.runtime.onMessage.addListener(handleRuntimeMessage);\n\nchrome.action.onClicked.addListener(handleActionClicked);\n","import {\n  getCurrentAssetIndex,\n  writeCurrentAssetIndex,\n  writeDefaultUserSettings,\n} from 'google3/cultural/integrations/chromeextensions/arttab/newtab/settings';\nimport {sendGoogleAnalyticsEvent} from 'google3/cultural/integrations/chromeextensions/shared/analytics/analytics';\nimport {\n  IMAX_JSON_DATA_URL,\n  loadImage,\n  syncData,\n  syncedAssetCount,\n} from 'google3/cultural/integrations/chromeextensions/shared/assetdata/assetdata';\n\n/**\n * Setup tasks when the extension is installed.\n * https://developer.chrome.com/docs/extensions/reference/runtime/#type-OnInstalledReason\n */\nexport async function handleOnInstalled(\n  details: chrome.runtime.InstalledDetails,\n) {\n  if (details.reason === chrome.runtime.OnInstalledReason.INSTALL) {\n    await writeDefaultUserSettings();\n  }\n\n  await syncData(IMAX_JSON_DATA_URL);\n\n  const totalAssets = await syncedAssetCount();\n\n  let currentAssetIndex = await getCurrentAssetIndex();\n  if (currentAssetIndex >= totalAssets) {\n    currentAssetIndex = 0;\n  }\n  await writeCurrentAssetIndex(currentAssetIndex);\n\n  let nextAssetIndex = currentAssetIndex + 1;\n  if (nextAssetIndex >= totalAssets) {\n    nextAssetIndex = 0;\n  }\n\n  const currentLoad = await loadImage(currentAssetIndex);\n  const nextLoad = await loadImage(nextAssetIndex);\n\n  if (!currentLoad || !nextLoad) {\n    await sendGoogleAnalyticsEvent('install_image_load_error', {\n      'total_assets': totalAssets,\n      'current_asset': currentAssetIndex,\n    });\n  }\n\n  await sendGoogleAnalyticsEvent('chrome_runtime_on_installed', {\n    'reason': details.reason,\n  });\n}\n","import {\n  GAC_SITE_URL,\n  getUtmParams,\n  sendGoogleAnalyticsEvent,\n} from 'google3/cultural/integrations/chromeextensions/shared/analytics/analytics';\n\n/**\n * Extension icon click action.\n */\nexport function handleActionClicked(tab: chrome.tabs.Tab) {\n  const siteUrl = `${GAC_SITE_URL}?${getUtmParams()}`;\n  chrome.tabs.create({\n    active: true,\n    openerTabId: tab.id,\n    url: siteUrl,\n  });\n\n  sendGoogleAnalyticsEvent('action_clicked', {});\n}\n"],
"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.getGlobal","$jscomp.polyfill","$jscomp.iteratorPrototype","$jscomp.arrayIteratorImpl","$jscomp.assign","$jscomp.generator.Context","$jscomp.asyncExecutePromiseGenerator","$jscomp.generator.Generator_","$jscomp.generator.Engine_","$jscomp.makeIterator","$jscomp.iteratorFromArray","writeData","key","data","local","$jscomp.asyncExecutePromiseGeneratorProgram","chrome","storage","set","sync","readData","localStorage","get","KEY","goog.string.repeat","String","prototype","repeat","string","length","Array","join","goog.string.padNumber","num","Number","isFinite","s","index","indexOf","sign","substring","Math","max","goog.date.Date","date","Date","now","expectedDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","maybeFixDst_","goog.date.Date.prototype","getFullYear","goog.date.Date.prototype.getFullYear","getMonth","goog.date.Date.prototype.getMonth","goog.date.Date.prototype.getDate","goog.date.Date.prototype.set","add","goog.date.Date.prototype.add","interval","years","months","month","year","getYear","floor","FEB","JUN","SEP","NOV","APR","min","daysInTargetMonth","setDate","setFullYear","setMonth","days","initialYear","yearAdjustment","result","getTime","noon","goog.date.Date.prototype.toIsoString","opt_verbose","opt_tz","str","abs","offset","getTimezoneOffset","tz","n","h","m","toString","goog.date.Date.prototype.toString","toIsoString","goog.date.Date.prototype.maybeFixDst_","expected","setUTCHours","getUTCHours","dir","valueOf","goog.date.Date.prototype.valueOf","DEFAULT_USER_SETTINGS","writeDefaultUserSettings","Object","keys","forEach","JSON","stringify","writeCurrentAssetIndex","indexToSave","DATE_KEY","verbose","includeTz","getCurrentAssetIndex","storedValueStr","parse","getOrCreateClientId","clientId","undefined","self","crypto","randomUUID","sendGoogleAnalyticsEvent","eventName","params","mode","PROD","body","postUrl","postData","response","validationResult","runtime","getManifest","version","i18n","getAcceptLanguages","DEFAULT_ENGAGEMENT_TIME_MSEC","VALIDATE","GA_TEST_URL","GA_URL","method","headers","console","info","fetch","ok","error","status","json","CACHE_OPTIONS","ignoreMethod","ignoreSearch","ignoreVary","DATA_REQUEST_OPTIONS","IMAGE_REQUEST_OPTIONS","syncedAssetData","syncedAssetCount","syncData","cache","cachedResponse","fetchResponse","caches","open","CACHE_NAME","match","module$exports$google3$cultural$integrations$chromeextensions$shared$assetdata$assetdata.IMAX_JSON_DATA_URL","statusText","clone","put","loadImage","imageId","assetData","imageUrl","blobToDataUrl","dataUrl","image","IMAGE_SIZE_REQUEST","blob","data_url","Promise","resolve","reject","reader","FileReader","onload","reader.onload","onerror","reader.onerror","onabort","reader.onabort","Error","readAsDataURL","handleRotateImage","currentAssetIndex","totalAssets","nextAssetIndex","sendMessage","type","UPDATE_ASSET","onInstalled","addListener","handleOnInstalled","details","currentLoad","nextLoad","reason","OnInstalledReason","INSTALL","onMessage","handleRuntimeMessage","message","ROTATE_IMAGE","payload","action","onClicked","handleActionClicked","tab","tabs","create","active","openerTabId","id","url","siteUrl"]
}
